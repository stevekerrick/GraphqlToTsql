@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div id="app" class="container-fluid h-100" v-cloak>
    @Html.AntiForgeryToken()

    <div class="row input-row">
        <div class="col-4 mt-5 text-right">
            <div v-for="pbq in prebuiltQueries"
                 :key="pbq.name"
                 class="pbq px-1 pb-1 mx-1"
                 :class="{selected: pbq == selectedPrebuiltQuery}"
                 v-on:click="selectPrebuiltQuery(pbq)">
                 <span v-tooltip="pbq.description">{{pbq.name}}</span>
            </div>
        </div>
        <div class="col-8">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link" :class="{ active: inputTab === 0 }" href="#" v-on:click="selectInputTab(0)">GraphQL</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" :class="{ active: inputTab === 1 }" href="#" v-on:click="selectInputTab(1)">Params</a>
                </li>
            </ul>
            <div class="input-controls">
                <textarea v-model="graphql" v-show="inputTab === 0"></textarea>
                <textarea v-model="graphqlParameters" v-show="inputTab === 1"></textarea>
            </div>
        </div>
    </div>

    <div class="row input-button-row">
        <div class="col-4"></div>
        <div class="col-8 mt-1">
            <button class="btn btn-sm btn-primary" v-on:click="run">Run Query</button>
        </div>
    </div>

    <div class="row mt-3 pt-3 results-row" v-if="results.length > 0">
        <div class="col-4 scroll-panel">
            <div v-for="r in results" :key="r.key" class="result-card p-1 mt-2" :class="{selected: r === result, error: r.error}" v-on:click="selectResult(r)">
                {{r.error || r.oneLineGraphql}}
            </div>
        </div>
        <div class="col-8 h-100">
            <ul class="nav nav-tabs">
                <li v-for="(tab, index) in resultTabs" :key="tab" class="nav-item">
                    <a class="nav-link" :class="{ active: index === resultTab, disabled: (index === 5 && result && !result.error) || (index === 6 && result && !result.statistics) }" href="#" v-on:click="selectResultTab(index)">{{ tab }}</a>
                </li>
            </ul>
            <div class="result-text-container">
                <textarea readonly v-model="result.graphql" v-show="resultTab === 0"></textarea>
                <textarea readonly v-model="result.graphqlParameters" v-show="resultTab === 1"></textarea>
                <textarea readonly v-model="result.tsql" v-show="resultTab === 2"></textarea>
                <textarea readonly v-model="result.tsqlParameters" v-show="resultTab === 3"></textarea>
                <textarea readonly v-model="result.data" v-show="resultTab === 4"></textarea>
                <textarea readonly v-model="result.error" v-show="resultTab === 5"></textarea>
                <div class="statistics scroll-panel p-1" v-show="resultTab === 6">
                    <div v-for="stat in result.statistics" :key="stat.name" class="statistic">
                        <div>{{stat.name}}</div>
                        <div>{{stat.value}}</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://unpkg.com/popper.js"></script>
<script src="https://unpkg.com/vue/dist/vue.js"></script>
<script src="https://unpkg.com/v-tooltip@2.0.2"></script>

<script>
    // Prebuilt queries
    var simpleQuery = `{
  epc (id: 1) {
    id
  }
}`;
    var productLotsQuery = `query ProductLots ($urn: String) {
  product (urn: $urn) {
    name lots {
      lotNumber expirationDate epcsConnection {
        epcCount: totalCount
      }
    }
  }
}`;

    var prebuiltQueries = [
        { name: "empty", description: "clears the workspace", graphql: "", graphqlParameters: "" },
        { name: "simple", description: "simplest possible query", graphql: simpleQuery, graphqlParameters: "" },
        { name: "product lots", description: "highlights totalCount", graphql: productLotsQuery, graphqlParameters: '{ urn: "urn:epc:idpat:sgtin:258643.3704146.*" }' }
    ];

</script>
<script>

    function stringToObject(objectString) {
        if (!objectString) return objectString;
        var jsObject = Function('return ' + objectString)();
        return jsObject;
    }

    function removeWhitespace(str) {
        return (str || "").replace(/\s+/g, " ");
    }

    var app = new Vue({
        el: "#app",
        data: {
            prebuiltQueries: prebuiltQueries,
            selectedPrebuiltQuery: null,
            graphql: "",
            graphqlParameters: "",
            results: [],
            result: null,
            inputTab: 0,
            resultTabs: ["GraphQL", "Params", "TSQL", "Tsql Params", "Data", "Error", "Stats"],
            resultTab: 0
        },
        methods: {
            run: function () {
                var vm = this;

                function formatObject(objectString) {
                    if (!objectString) return objectString;
                    var jsObject = Function('return ' + objectString)();
                    if (!jsObject) return objectString;
                    var json = JSON.stringify(jsObject, null, 2);
                    return json;
                }

                function regularResult(data) {
                    var result = {
                        graphql: vm.graphql,
                        oneLineGraphql: removeWhitespace(vm.graphql),
                        graphqlParameters: formatObject(vm.graphqlParameters),
                        tsql: data.tsql,
                        tsqlParameters: data.tsqlParametersJson,
                        data: data.dataJson,
                        isSuccess: data.isSuccess,
                        error: data.error,
                        statistics: data.statistics,
                        key: Date.now()
                    }
                    vm.result = result;
                    vm.results.unshift(result);
                    vm.resultTab = result.isSuccess? 4 : 5;
                }

                function errorResult(error) {
                    var result = {
                        graphql: vm.graphql,
                        oneLineGraphql: removeWhitespace(vm.graphql),
                        graphqlParameters: formatObject(vm.graphqlParameters),
                        isSuccessful: false,
                        error: error,
                        key: Date.now()
                    };
                    vm.result = result;
                    vm.results.unshift(result);
                    vm.resultTab = 5;
                }

                var antiForgeryToken = $('input:hidden[name="__RequestVerificationToken"]').val();

                fetch("/?handler=RunQuery", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": antiForgeryToken
                    },
                    body: JSON.stringify({ Graphql: this.graphql, GraphqlParametersJson: formatObject(this.graphqlParameters) }),
                })
                .then(response => response.json())
                .then(data => {
                    regularResult(data);
                })
                .catch((error) => {
                    errorResult(error);
                });
            },
            selectInputTab: function (index) {
                this.inputTab = index;
            },
            selectResultTab: function (index) {
                this.resultTab = index;
            },
            selectResult: function (r) {
                this.result = r;
            },
            selectPrebuiltQuery: function (pbq) {
                this.selectedPrebuiltQuery = pbq;
                this.graphql = pbq.graphql;
                this.graphqlParameters = pbq.graphqlParameters;
            }
        },
        mounted: function () {
            this.selectPrebuiltQuery(this.prebuiltQueries[1]);
        }
    });

</script>
}

@section Styles {
<style>
    [v-cloak] {
        display: none
    }
    body { background-color: whitesmoke; }
    textarea {
        min-height: 100%;
        width: 100%;
        resize: none;
        overflow-x: hidden;
        overflow-y: scroll;
        padding: .5em;
        border-color: lightgray;
    }
    .pbq { 
        display: inline-block; 
        border: 1px solid grey; 
        border-radius: 1em; 
        background-color: whitesmoke; 
        cursor: pointer;
        font-size: smaller;
    }
    .pbq.selected { background-color: white; }
    .input-row { height: calc(48% - 1em); }
    .input-controls { height: calc(100% - 37px); }
    .input-button-row { height: 2em; }
    .nav-tabs { height: 37px; overflow: hidden; }
    .results-row { height: calc(48% - 1em); background-color: lightgray; }
    .result-text-container { height: calc(100% - 37px); }

    a.command-link:hover {
        text-decoration: none;
    }

    .scroll-panel { width: 100%; height: 100%; overflow-y: scroll; }
    .result-card {
        border: 1px solid green;
        border-radius: .5em;
        cursor: pointer;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: smaller;
    }
    .result-card.selected {
        background-color: whitesmoke;
    }
    .result-card.error {
        border-color: red;
    }
    .statistics {
        background-color: white;
    }
    .statistic div {
        display: inline-block;
        width: 15em;
    }
</style>
<style>
    .tooltip {
      display: block !important;
      z-index: 10000;
    }

    .tooltip .tooltip-inner {
      background: black;
      color: white;
      border-radius: 16px;
      padding: 5px 10px 4px;
    }

    .tooltip .tooltip-arrow {
      width: 0;
      height: 0;
      border-style: solid;
      position: absolute;
      margin: 5px;
      border-color: black;
    }

    .tooltip[x-placement^="top"] {
      margin-bottom: 10px;
    }

    .tooltip[x-placement^="top"] .tooltip-arrow {
      border-width: 5px 5px 0 5px;
      border-left-color: transparent !important;
      border-right-color: transparent !important;
      border-bottom-color: transparent !important;
      bottom: -5px;
      left: calc(50% - 5px);
      margin-top: 0;
      margin-bottom: 0;
    }

    .tooltip[x-placement^="bottom"] {
      margin-top: 5px;
    }

    .tooltip[x-placement^="bottom"] .tooltip-arrow {
      border-width: 0 5px 5px 5px;
      border-left-color: transparent !important;
      border-right-color: transparent !important;
      border-top-color: transparent !important;
      top: -5px;
      left: calc(50% - 5px);
      margin-top: 0;
      margin-bottom: 0;
    }

    .tooltip[x-placement^="right"] {
      margin-left: 5px;
    }

    .tooltip[x-placement^="right"] .tooltip-arrow {
      border-width: 5px 5px 5px 0;
      border-left-color: transparent !important;
      border-top-color: transparent !important;
      border-bottom-color: transparent !important;
      left: -5px;
      top: calc(50% - 5px);
      margin-left: 0;
      margin-right: 0;
    }

    .tooltip[x-placement^="left"] {
      margin-right: 5px;
    }

    .tooltip[x-placement^="left"] .tooltip-arrow {
      border-width: 5px 0 5px 5px;
      border-top-color: transparent !important;
      border-right-color: transparent !important;
      border-bottom-color: transparent !important;
      right: -5px;
      top: calc(50% - 5px);
      margin-left: 0;
      margin-right: 0;
    }

    .tooltip[aria-hidden='true'] {
      visibility: hidden;
      opacity: 0;
      transition: opacity .15s, visibility .15s;
    }

    .tooltip[aria-hidden='false'] {
      visibility: visible;
      opacity: 1;
      transition: opacity .15s;
    }
</style>
}
