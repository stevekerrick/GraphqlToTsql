//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gql.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphqlToTsql.CodeGen.Gql {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, NAME=52, STRING=53, 
		BLOCK_STRING=54, ID=55, FLOAT=56, INT=57, PUNCTUATOR=58, WS=59, COMMA=60, 
		LineComment=61, UNICODE_BOM=62, UTF8_BOM=63, UTF16_BOM=64, UTF32_BOM=65;
	public const int
		RULE_document = 0, RULE_definition = 1, RULE_executableDefinition = 2, 
		RULE_operationDefinition = 3, RULE_operationType = 4, RULE_selectionSet = 5, 
		RULE_selection = 6, RULE_field = 7, RULE_fieldName = 8, RULE_arguments = 9, 
		RULE_argument = 10, RULE_alias = 11, RULE_fragmentSpread = 12, RULE_fragmentDefinition = 13, 
		RULE_fragmentName = 14, RULE_typeCondition = 15, RULE_inlineFragment = 16, 
		RULE_value = 17, RULE_intValue = 18, RULE_floatValue = 19, RULE_booleanValue = 20, 
		RULE_stringValue = 21, RULE_nullValue = 22, RULE_enumValue = 23, RULE_listValue = 24, 
		RULE_objectValue = 25, RULE_objectField = 26, RULE_variable = 27, RULE_variableDefinitions = 28, 
		RULE_variableDefinition = 29, RULE_defaultValue = 30, RULE_type_ = 31, 
		RULE_namedType = 32, RULE_listType = 33, RULE_directives = 34, RULE_directive = 35, 
		RULE_directiveName = 36, RULE_typeSystemDefinition = 37, RULE_typeSystemExtension = 38, 
		RULE_schemaDefinition = 39, RULE_rootOperationTypeDefinition = 40, RULE_schemaExtension = 41, 
		RULE_operationTypeDefinition = 42, RULE_description = 43, RULE_typeDefinition = 44, 
		RULE_typeExtension = 45, RULE_scalarTypeDefinition = 46, RULE_scalarTypeExtension = 47, 
		RULE_objectTypeDefinition = 48, RULE_implementsInterfaces = 49, RULE_fieldsDefinition = 50, 
		RULE_fieldDefinition = 51, RULE_argumentsDefinition = 52, RULE_inputValueDefinition = 53, 
		RULE_objectTypeExtension = 54, RULE_interfaceTypeDefinition = 55, RULE_interfaceTypeExtension = 56, 
		RULE_unionTypeDefinition = 57, RULE_unionMemberTypes = 58, RULE_unionTypeExtension = 59, 
		RULE_enumTypeDefinition = 60, RULE_enumValuesDefinition = 61, RULE_enumValueDefinition = 62, 
		RULE_enumTypeExtension = 63, RULE_inputObjectTypeDefinition = 64, RULE_inputFieldsDefinition = 65, 
		RULE_inputObjectTypeExtension = 66, RULE_directiveDefinition = 67, RULE_directiveLocations = 68, 
		RULE_directiveLocation = 69, RULE_executableDirectiveLocation = 70, RULE_typeSystemDirectiveLocation = 71, 
		RULE_name = 72;
	public static readonly string[] ruleNames = {
		"document", "definition", "executableDefinition", "operationDefinition", 
		"operationType", "selectionSet", "selection", "field", "fieldName", "arguments", 
		"argument", "alias", "fragmentSpread", "fragmentDefinition", "fragmentName", 
		"typeCondition", "inlineFragment", "value", "intValue", "floatValue", 
		"booleanValue", "stringValue", "nullValue", "enumValue", "listValue", 
		"objectValue", "objectField", "variable", "variableDefinitions", "variableDefinition", 
		"defaultValue", "type_", "namedType", "listType", "directives", "directive", 
		"directiveName", "typeSystemDefinition", "typeSystemExtension", "schemaDefinition", 
		"rootOperationTypeDefinition", "schemaExtension", "operationTypeDefinition", 
		"description", "typeDefinition", "typeExtension", "scalarTypeDefinition", 
		"scalarTypeExtension", "objectTypeDefinition", "implementsInterfaces", 
		"fieldsDefinition", "fieldDefinition", "argumentsDefinition", "inputValueDefinition", 
		"objectTypeExtension", "interfaceTypeDefinition", "interfaceTypeExtension", 
		"unionTypeDefinition", "unionMemberTypes", "unionTypeExtension", "enumTypeDefinition", 
		"enumValuesDefinition", "enumValueDefinition", "enumTypeExtension", "inputObjectTypeDefinition", 
		"inputFieldsDefinition", "inputObjectTypeExtension", "directiveDefinition", 
		"directiveLocations", "directiveLocation", "executableDirectiveLocation", 
		"typeSystemDirectiveLocation", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'query'", "'mutation'", "'subscription'", "'{'", "'}'", "'('", 
		"')'", "':'", "'...'", "'fragment'", "'on'", "'true'", "'false'", "'null'", 
		"'['", "']'", "'$'", "'='", "'!'", "'@'", "'schema'", "'extend'", "'scalar'", 
		"'extends'", "'type'", "'implements'", "'&'", "'interface'", "'union'", 
		"'|'", "'enum'", "'input'", "'directive'", "'QUERY'", "'MUTATION'", "'SUBSCRIPTION'", 
		"'FIELD'", "'FRAGMENT_DEFINITION'", "'FRAGMENT_SPREAD'", "'INLINE_FRAGMENT'", 
		"'SCHEMA'", "'SCALAR'", "'OBJECT'", "'FIELD_DEFINITION'", "'ARGUMENT_DEFINITION'", 
		"'INTERFACE'", "'UNION'", "'ENUM'", "'ENUM_VALUE'", "'INPUT_OBJECT'", 
		"'INPUT_FIELD_DEFINITION'", null, null, null, null, null, null, null, 
		null, "','", null, null, "'\uEFBBBF'", "'\uFEFF'", "'\u0000FEFF'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "NAME", "STRING", "BLOCK_STRING", "ID", "FLOAT", 
		"INT", "PUNCTUATOR", "WS", "COMMA", "LineComment", "UNICODE_BOM", "UTF8_BOM", 
		"UTF16_BOM", "UTF32_BOM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 146; definition();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__9) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << STRING) | (1L << BLOCK_STRING))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ExecutableDefinitionContext executableDefinition() {
			return GetRuleContext<ExecutableDefinitionContext>(0);
		}
		public TypeSystemDefinitionContext typeSystemDefinition() {
			return GetRuleContext<TypeSystemDefinitionContext>(0);
		}
		public TypeSystemExtensionContext typeSystemExtension() {
			return GetRuleContext<TypeSystemExtensionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; executableDefinition();
				}
				break;
			case T__20:
			case T__22:
			case T__24:
			case T__27:
			case T__28:
			case T__30:
			case T__31:
			case T__32:
			case STRING:
			case BLOCK_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; typeSystemDefinition();
				}
				break;
			case T__21:
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153; typeSystemExtension();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutableDefinitionContext : ParserRuleContext {
		public OperationDefinitionContext operationDefinition() {
			return GetRuleContext<OperationDefinitionContext>(0);
		}
		public FragmentDefinitionContext fragmentDefinition() {
			return GetRuleContext<FragmentDefinitionContext>(0);
		}
		public ExecutableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterExecutableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitExecutableDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExecutableDefinitionContext executableDefinition() {
		ExecutableDefinitionContext _localctx = new ExecutableDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_executableDefinition);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156; operationDefinition();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157; fragmentDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDefinitionContext : ParserRuleContext {
		public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableDefinitionsContext variableDefinitions() {
			return GetRuleContext<VariableDefinitionsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public OperationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterOperationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitOperationDefinition(this);
		}
	}

	[RuleVersion(0)]
	public OperationDefinitionContext operationDefinition() {
		OperationDefinitionContext _localctx = new OperationDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_operationDefinition);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; operationType();
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME))) != 0)) {
					{
					State = 161; name();
					}
				}

				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 164; variableDefinitions();
					}
				}

				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 167; directives();
					}
				}

				State = 170; selectionSet();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; selectionSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationTypeContext : ParserRuleContext {
		public OperationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterOperationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitOperationType(this);
		}
	}

	[RuleVersion(0)]
	public OperationTypeContext operationType() {
		OperationTypeContext _localctx = new OperationTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionSetContext : ParserRuleContext {
		public SelectionContext[] selection() {
			return GetRuleContexts<SelectionContext>();
		}
		public SelectionContext selection(int i) {
			return GetRuleContext<SelectionContext>(i);
		}
		public SelectionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterSelectionSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitSelectionSet(this);
		}
	}

	[RuleVersion(0)]
	public SelectionSetContext selectionSet() {
		SelectionSetContext _localctx = new SelectionSetContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectionSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(T__3);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 178; selection();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME))) != 0) );
			State = 183; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public FragmentSpreadContext fragmentSpread() {
			return GetRuleContext<FragmentSpreadContext>(0);
		}
		public InlineFragmentContext inlineFragment() {
			return GetRuleContext<InlineFragmentContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 12, RULE_selection);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; fragmentSpread();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187; inlineFragment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 14, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; fieldName();
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 191; arguments();
				}
			}

			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 194; directives();
				}
			}

			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 197; selectionSet();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 200; alias();
				}
				break;
			}
			State = 203; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(T__5);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 206; argument();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME))) != 0) );
			State = 211; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; name();
			State = 214; Match(T__7);
			State = 215; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 22, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; name();
			State = 218; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentSpreadContext : ParserRuleContext {
		public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentSpreadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentSpread; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFragmentSpread(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFragmentSpread(this);
		}
	}

	[RuleVersion(0)]
	public FragmentSpreadContext fragmentSpread() {
		FragmentSpreadContext _localctx = new FragmentSpreadContext(Context, State);
		EnterRule(_localctx, 24, RULE_fragmentSpread);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(T__8);
			State = 221; fragmentName();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 222; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentDefinitionContext : ParserRuleContext {
		public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFragmentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFragmentDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FragmentDefinitionContext fragmentDefinition() {
		FragmentDefinitionContext _localctx = new FragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_fragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(T__9);
			State = 226; fragmentName();
			State = 227; typeCondition();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 228; directives();
				}
			}

			State = 231; selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentNameContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public FragmentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFragmentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFragmentName(this);
		}
	}

	[RuleVersion(0)]
	public FragmentNameContext fragmentName() {
		FragmentNameContext _localctx = new FragmentNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_fragmentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConditionContext : ParserRuleContext {
		public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		public TypeConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeCondition(this);
		}
	}

	[RuleVersion(0)]
	public TypeConditionContext typeCondition() {
		TypeConditionContext _localctx = new TypeConditionContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(T__10);
			State = 236; namedType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineFragmentContext : ParserRuleContext {
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InlineFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInlineFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInlineFragment(this);
		}
	}

	[RuleVersion(0)]
	public InlineFragmentContext inlineFragment() {
		InlineFragmentContext _localctx = new InlineFragmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_inlineFragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(T__8);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 239; typeCondition();
				}
			}

			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 242; directives();
				}
			}

			State = 245; selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public IntValueContext intValue() {
			return GetRuleContext<IntValueContext>(0);
		}
		public FloatValueContext floatValue() {
			return GetRuleContext<FloatValueContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public NullValueContext nullValue() {
			return GetRuleContext<NullValueContext>(0);
		}
		public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public ListValueContext listValue() {
			return GetRuleContext<ListValueContext>(0);
		}
		public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_value);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; variable();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; intValue();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249; floatValue();
				}
				break;
			case STRING:
			case BLOCK_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 250; stringValue();
				}
				break;
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 251; booleanValue();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 252; nullValue();
				}
				break;
			case T__20:
			case T__21:
			case T__23:
			case T__24:
			case T__25:
			case T__27:
			case T__28:
			case T__30:
			case T__31:
			case NAME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 253; enumValue();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 8);
				{
				State = 254; listValue();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 9);
				{
				State = 255; objectValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(GqlParser.INT, 0); }
		public IntValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterIntValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitIntValue(this);
		}
	}

	[RuleVersion(0)]
	public IntValueContext intValue() {
		IntValueContext _localctx = new IntValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_intValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatValueContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(GqlParser.FLOAT, 0); }
		public FloatValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFloatValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFloatValue(this);
		}
	}

	[RuleVersion(0)]
	public FloatValueContext floatValue() {
		FloatValueContext _localctx = new FloatValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_floatValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_booleanValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(GqlParser.STRING, 0); }
		public ITerminalNode BLOCK_STRING() { return GetToken(GqlParser.BLOCK_STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==BLOCK_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullValueContext : ParserRuleContext {
		public NullValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterNullValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitNullValue(this);
		}
	}

	[RuleVersion(0)]
	public NullValueContext nullValue() {
		NullValueContext _localctx = new NullValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_nullValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListValueContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ListValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterListValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitListValue(this);
		}
	}

	[RuleVersion(0)]
	public ListValueContext listValue() {
		ListValueContext _localctx = new ListValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_listValue);
		int _la;
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; Match(T__14);
				State = 271; Match(T__15);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; Match(T__14);
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 273; value();
					}
					}
					State = 276;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME) | (1L << STRING) | (1L << BLOCK_STRING) | (1L << FLOAT) | (1L << INT))) != 0) );
				State = 278; Match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterObjectValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitObjectValue(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(Context, State);
		EnterRule(_localctx, 50, RULE_objectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(T__3);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME))) != 0)) {
				{
				{
				State = 283; objectField();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ObjectFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterObjectField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitObjectField(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFieldContext objectField() {
		ObjectFieldContext _localctx = new ObjectFieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_objectField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; name();
			State = 292; Match(T__7);
			State = 293; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 54, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(T__16);
			State = 296; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionsContext : ParserRuleContext {
		public VariableDefinitionContext[] variableDefinition() {
			return GetRuleContexts<VariableDefinitionContext>();
		}
		public VariableDefinitionContext variableDefinition(int i) {
			return GetRuleContext<VariableDefinitionContext>(i);
		}
		public VariableDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterVariableDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitVariableDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionsContext variableDefinitions() {
		VariableDefinitionsContext _localctx = new VariableDefinitionsContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(T__5);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 299; variableDefinition();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 );
			State = 304; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterVariableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitVariableDefinition(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; variable();
			State = 307; Match(T__7);
			State = 308; type_();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 309; defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(T__17);
			State = 313; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 62, RULE_type_);
		int _la;
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__23:
			case T__24:
			case T__25:
			case T__27:
			case T__28:
			case T__30:
			case T__31:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; namedType();
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 316; Match(T__18);
					}
				}

				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; listType();
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 320; Match(T__18);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedTypeContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
	}

	[RuleVersion(0)]
	public NamedTypeContext namedType() {
		NamedTypeContext _localctx = new NamedTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_namedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(T__14);
			State = 328; type_();
			State = 329; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivesContext : ParserRuleContext {
		public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		public DirectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirectives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirectives(this);
		}
	}

	[RuleVersion(0)]
	public DirectivesContext directives() {
		DirectivesContext _localctx = new DirectivesContext(Context, State);
		EnterRule(_localctx, 68, RULE_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 331; directive();
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__19 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveNameContext directiveName() {
			return GetRuleContext<DirectiveNameContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 70, RULE_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; directiveName();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 337; arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveNameContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DirectiveNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirectiveName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirectiveName(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveNameContext directiveName() {
		DirectiveNameContext _localctx = new DirectiveNameContext(Context, State);
		EnterRule(_localctx, 72, RULE_directiveName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(T__19);
			State = 341; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemDefinitionContext : ParserRuleContext {
		public SchemaDefinitionContext schemaDefinition() {
			return GetRuleContext<SchemaDefinitionContext>(0);
		}
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public DirectiveDefinitionContext directiveDefinition() {
			return GetRuleContext<DirectiveDefinitionContext>(0);
		}
		public TypeSystemDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeSystemDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeSystemDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TypeSystemDefinitionContext typeSystemDefinition() {
		TypeSystemDefinitionContext _localctx = new TypeSystemDefinitionContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeSystemDefinition);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; schemaDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; typeDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; directiveDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemExtensionContext : ParserRuleContext {
		public SchemaExtensionContext schemaExtension() {
			return GetRuleContext<SchemaExtensionContext>(0);
		}
		public TypeExtensionContext typeExtension() {
			return GetRuleContext<TypeExtensionContext>(0);
		}
		public TypeSystemExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeSystemExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeSystemExtension(this);
		}
	}

	[RuleVersion(0)]
	public TypeSystemExtensionContext typeSystemExtension() {
		TypeSystemExtensionContext _localctx = new TypeSystemExtensionContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeSystemExtension);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; schemaExtension();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; typeExtension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaDefinitionContext : ParserRuleContext {
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public RootOperationTypeDefinitionContext[] rootOperationTypeDefinition() {
			return GetRuleContexts<RootOperationTypeDefinitionContext>();
		}
		public RootOperationTypeDefinitionContext rootOperationTypeDefinition(int i) {
			return GetRuleContext<RootOperationTypeDefinitionContext>(i);
		}
		public SchemaDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterSchemaDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitSchemaDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SchemaDefinitionContext schemaDefinition() {
		SchemaDefinitionContext _localctx = new SchemaDefinitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_schemaDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(T__20);
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 353; directives();
				}
			}

			State = 356; Match(T__3);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 357; rootOperationTypeDefinition();
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0) );
			State = 362; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootOperationTypeDefinitionContext : ParserRuleContext {
		public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		public RootOperationTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootOperationTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterRootOperationTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitRootOperationTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public RootOperationTypeDefinitionContext rootOperationTypeDefinition() {
		RootOperationTypeDefinitionContext _localctx = new RootOperationTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 80, RULE_rootOperationTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; operationType();
			State = 365; Match(T__7);
			State = 366; namedType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaExtensionContext : ParserRuleContext {
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public OperationTypeDefinitionContext[] operationTypeDefinition() {
			return GetRuleContexts<OperationTypeDefinitionContext>();
		}
		public OperationTypeDefinitionContext operationTypeDefinition(int i) {
			return GetRuleContext<OperationTypeDefinitionContext>(i);
		}
		public SchemaExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterSchemaExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitSchemaExtension(this);
		}
	}

	[RuleVersion(0)]
	public SchemaExtensionContext schemaExtension() {
		SchemaExtensionContext _localctx = new SchemaExtensionContext(Context, State);
		EnterRule(_localctx, 82, RULE_schemaExtension);
		int _la;
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368; Match(T__21);
				State = 369; Match(T__20);
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 370; directives();
					}
				}

				State = 373; Match(T__3);
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 374; operationTypeDefinition();
					}
					}
					State = 377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0) );
				State = 379; Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; Match(T__21);
				State = 382; Match(T__20);
				State = 383; directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationTypeDefinitionContext : ParserRuleContext {
		public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		public OperationTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterOperationTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitOperationTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public OperationTypeDefinitionContext operationTypeDefinition() {
		OperationTypeDefinitionContext _localctx = new OperationTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 84, RULE_operationTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; operationType();
			State = 387; Match(T__7);
			State = 388; namedType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 86, RULE_description);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public ScalarTypeDefinitionContext scalarTypeDefinition() {
			return GetRuleContext<ScalarTypeDefinitionContext>(0);
		}
		public ObjectTypeDefinitionContext objectTypeDefinition() {
			return GetRuleContext<ObjectTypeDefinitionContext>(0);
		}
		public InterfaceTypeDefinitionContext interfaceTypeDefinition() {
			return GetRuleContext<InterfaceTypeDefinitionContext>(0);
		}
		public UnionTypeDefinitionContext unionTypeDefinition() {
			return GetRuleContext<UnionTypeDefinitionContext>(0);
		}
		public EnumTypeDefinitionContext enumTypeDefinition() {
			return GetRuleContext<EnumTypeDefinitionContext>(0);
		}
		public InputObjectTypeDefinitionContext inputObjectTypeDefinition() {
			return GetRuleContext<InputObjectTypeDefinitionContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeDefinition);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; scalarTypeDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393; objectTypeDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 394; interfaceTypeDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 395; unionTypeDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 396; enumTypeDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 397; inputObjectTypeDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExtensionContext : ParserRuleContext {
		public ScalarTypeExtensionContext scalarTypeExtension() {
			return GetRuleContext<ScalarTypeExtensionContext>(0);
		}
		public ObjectTypeExtensionContext objectTypeExtension() {
			return GetRuleContext<ObjectTypeExtensionContext>(0);
		}
		public InterfaceTypeExtensionContext interfaceTypeExtension() {
			return GetRuleContext<InterfaceTypeExtensionContext>(0);
		}
		public UnionTypeExtensionContext unionTypeExtension() {
			return GetRuleContext<UnionTypeExtensionContext>(0);
		}
		public EnumTypeExtensionContext enumTypeExtension() {
			return GetRuleContext<EnumTypeExtensionContext>(0);
		}
		public InputObjectTypeExtensionContext inputObjectTypeExtension() {
			return GetRuleContext<InputObjectTypeExtensionContext>(0);
		}
		public TypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeExtension(this);
		}
	}

	[RuleVersion(0)]
	public TypeExtensionContext typeExtension() {
		TypeExtensionContext _localctx = new TypeExtensionContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeExtension);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400; scalarTypeExtension();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401; objectTypeExtension();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402; interfaceTypeExtension();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403; unionTypeExtension();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 404; enumTypeExtension();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 405; inputObjectTypeExtension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ScalarTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterScalarTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitScalarTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeDefinitionContext scalarTypeDefinition() {
		ScalarTypeDefinitionContext _localctx = new ScalarTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 92, RULE_scalarTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 408; description();
				}
			}

			State = 411; Match(T__22);
			State = 412; name();
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 413; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeExtensionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ScalarTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarTypeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterScalarTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitScalarTypeExtension(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeExtensionContext scalarTypeExtension() {
		ScalarTypeExtensionContext _localctx = new ScalarTypeExtensionContext(Context, State);
		EnterRule(_localctx, 94, RULE_scalarTypeExtension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T__23);
			State = 417; Match(T__22);
			State = 418; name();
			State = 419; directives();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public ObjectTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterObjectTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitObjectTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeDefinitionContext objectTypeDefinition() {
		ObjectTypeDefinitionContext _localctx = new ObjectTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_objectTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 421; description();
				}
			}

			State = 424; Match(T__24);
			State = 425; name();
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 426; implementsInterfaces(0);
				}
			}

			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 429; directives();
				}
			}

			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 432; fieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsInterfacesContext : ParserRuleContext {
		public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		public ImplementsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsInterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterImplementsInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitImplementsInterfaces(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsInterfacesContext implementsInterfaces() {
		return implementsInterfaces(0);
	}

	private ImplementsInterfacesContext implementsInterfaces(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ImplementsInterfacesContext _localctx = new ImplementsInterfacesContext(Context, _parentState);
		ImplementsInterfacesContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_implementsInterfaces, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 436; Match(T__25);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 437; Match(T__26);
				}
			}

			State = 440; namedType();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ImplementsInterfacesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_implementsInterfaces);
					State = 442;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 443; Match(T__26);
					State = 444; namedType();
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldsDefinitionContext : ParserRuleContext {
		public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		public FieldsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFieldsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFieldsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FieldsDefinitionContext fieldsDefinition() {
		FieldsDefinitionContext _localctx = new FieldsDefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_fieldsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T__3);
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 451; fieldDefinition();
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME) | (1L << STRING) | (1L << BLOCK_STRING))) != 0) );
			State = 456; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 458; description();
				}
			}

			State = 461; name();
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 462; argumentsDefinition();
				}
			}

			State = 465; Match(T__7);
			State = 466; type_();
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 467; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDefinitionContext : ParserRuleContext {
		public InputValueDefinitionContext[] inputValueDefinition() {
			return GetRuleContexts<InputValueDefinitionContext>();
		}
		public InputValueDefinitionContext inputValueDefinition(int i) {
			return GetRuleContext<InputValueDefinitionContext>(i);
		}
		public ArgumentsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterArgumentsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitArgumentsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsDefinitionContext argumentsDefinition() {
		ArgumentsDefinitionContext _localctx = new ArgumentsDefinitionContext(Context, State);
		EnterRule(_localctx, 104, RULE_argumentsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; Match(T__5);
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 471; inputValueDefinition();
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME) | (1L << STRING) | (1L << BLOCK_STRING))) != 0) );
			State = 476; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputValueDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InputValueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputValueDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInputValueDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInputValueDefinition(this);
		}
	}

	[RuleVersion(0)]
	public InputValueDefinitionContext inputValueDefinition() {
		InputValueDefinitionContext _localctx = new InputValueDefinitionContext(Context, State);
		EnterRule(_localctx, 106, RULE_inputValueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 478; description();
				}
			}

			State = 481; name();
			State = 482; Match(T__7);
			State = 483; type_();
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 484; defaultValue();
				}
			}

			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 487; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeExtensionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ObjectTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectTypeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterObjectTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitObjectTypeExtension(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeExtensionContext objectTypeExtension() {
		ObjectTypeExtensionContext _localctx = new ObjectTypeExtensionContext(Context, State);
		EnterRule(_localctx, 108, RULE_objectTypeExtension);
		int _la;
		try {
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490; Match(T__21);
				State = 491; Match(T__24);
				State = 492; name();
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25) {
					{
					State = 493; implementsInterfaces(0);
					}
				}

				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 496; directives();
					}
				}

				State = 499; fieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501; Match(T__21);
				State = 502; Match(T__24);
				State = 503; name();
				State = 505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25) {
					{
					State = 504; implementsInterfaces(0);
					}
				}

				State = 507; directives();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509; Match(T__21);
				State = 510; Match(T__24);
				State = 511; name();
				State = 512; implementsInterfaces(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public InterfaceTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeDefinitionContext interfaceTypeDefinition() {
		InterfaceTypeDefinitionContext _localctx = new InterfaceTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_interfaceTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 516; description();
				}
			}

			State = 519; Match(T__27);
			State = 520; name();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 521; directives();
				}
			}

			State = 525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 524; fieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeExtensionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InterfaceTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeExtension(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeExtensionContext interfaceTypeExtension() {
		InterfaceTypeExtensionContext _localctx = new InterfaceTypeExtensionContext(Context, State);
		EnterRule(_localctx, 112, RULE_interfaceTypeExtension);
		int _la;
		try {
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527; Match(T__21);
				State = 528; Match(T__27);
				State = 529; name();
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 530; directives();
					}
				}

				State = 533; fieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535; Match(T__21);
				State = 536; Match(T__27);
				State = 537; name();
				State = 538; directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public UnionMemberTypesContext unionMemberTypes() {
			return GetRuleContext<UnionMemberTypesContext>(0);
		}
		public UnionTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterUnionTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitUnionTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public UnionTypeDefinitionContext unionTypeDefinition() {
		UnionTypeDefinitionContext _localctx = new UnionTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_unionTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 542; description();
				}
			}

			State = 545; Match(T__28);
			State = 546; name();
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 547; directives();
				}
			}

			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 550; unionMemberTypes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionMemberTypesContext : ParserRuleContext {
		public NamedTypeContext[] namedType() {
			return GetRuleContexts<NamedTypeContext>();
		}
		public NamedTypeContext namedType(int i) {
			return GetRuleContext<NamedTypeContext>(i);
		}
		public UnionMemberTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionMemberTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterUnionMemberTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitUnionMemberTypes(this);
		}
	}

	[RuleVersion(0)]
	public UnionMemberTypesContext unionMemberTypes() {
		UnionMemberTypesContext _localctx = new UnionMemberTypesContext(Context, State);
		EnterRule(_localctx, 116, RULE_unionMemberTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; Match(T__17);
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 554; Match(T__29);
				}
			}

			State = 557; namedType();
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29) {
				{
				{
				State = 558; Match(T__29);
				State = 559; namedType();
				}
				}
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeExtensionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public UnionMemberTypesContext unionMemberTypes() {
			return GetRuleContext<UnionMemberTypesContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public UnionTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionTypeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterUnionTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitUnionTypeExtension(this);
		}
	}

	[RuleVersion(0)]
	public UnionTypeExtensionContext unionTypeExtension() {
		UnionTypeExtensionContext _localctx = new UnionTypeExtensionContext(Context, State);
		EnterRule(_localctx, 118, RULE_unionTypeExtension);
		int _la;
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 565; Match(T__21);
				State = 566; Match(T__28);
				State = 567; name();
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 568; directives();
					}
				}

				State = 571; unionMemberTypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573; Match(T__21);
				State = 574; Match(T__28);
				State = 575; name();
				State = 576; directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EnumValuesDefinitionContext enumValuesDefinition() {
			return GetRuleContext<EnumValuesDefinitionContext>(0);
		}
		public EnumTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterEnumTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitEnumTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDefinitionContext enumTypeDefinition() {
		EnumTypeDefinitionContext _localctx = new EnumTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_enumTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 580; description();
				}
			}

			State = 583; Match(T__30);
			State = 584; name();
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 585; directives();
				}
			}

			State = 589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 588; enumValuesDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesDefinitionContext : ParserRuleContext {
		public EnumValueDefinitionContext[] enumValueDefinition() {
			return GetRuleContexts<EnumValueDefinitionContext>();
		}
		public EnumValueDefinitionContext enumValueDefinition(int i) {
			return GetRuleContext<EnumValueDefinitionContext>(i);
		}
		public EnumValuesDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValuesDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterEnumValuesDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitEnumValuesDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesDefinitionContext enumValuesDefinition() {
		EnumValuesDefinitionContext _localctx = new EnumValuesDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_enumValuesDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; Match(T__3);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 592; enumValueDefinition();
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME) | (1L << STRING) | (1L << BLOCK_STRING))) != 0) );
			State = 597; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDefinitionContext : ParserRuleContext {
		public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EnumValueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterEnumValueDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitEnumValueDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueDefinitionContext enumValueDefinition() {
		EnumValueDefinitionContext _localctx = new EnumValueDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_enumValueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 599; description();
				}
			}

			State = 602; enumValue();
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 603; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeExtensionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumValuesDefinitionContext enumValuesDefinition() {
			return GetRuleContext<EnumValuesDefinitionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EnumTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterEnumTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitEnumTypeExtension(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeExtensionContext enumTypeExtension() {
		EnumTypeExtensionContext _localctx = new EnumTypeExtensionContext(Context, State);
		EnterRule(_localctx, 126, RULE_enumTypeExtension);
		int _la;
		try {
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 606; Match(T__21);
				State = 607; Match(T__30);
				State = 608; name();
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 609; directives();
					}
				}

				State = 612; enumValuesDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614; Match(T__21);
				State = 615; Match(T__30);
				State = 616; name();
				State = 617; directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputObjectTypeDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InputFieldsDefinitionContext inputFieldsDefinition() {
			return GetRuleContext<InputFieldsDefinitionContext>(0);
		}
		public InputObjectTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputObjectTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInputObjectTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInputObjectTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public InputObjectTypeDefinitionContext inputObjectTypeDefinition() {
		InputObjectTypeDefinitionContext _localctx = new InputObjectTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_inputObjectTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 621; description();
				}
			}

			State = 624; Match(T__31);
			State = 625; name();
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 626; directives();
				}
			}

			State = 630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 629; inputFieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputFieldsDefinitionContext : ParserRuleContext {
		public InputValueDefinitionContext[] inputValueDefinition() {
			return GetRuleContexts<InputValueDefinitionContext>();
		}
		public InputValueDefinitionContext inputValueDefinition(int i) {
			return GetRuleContext<InputValueDefinitionContext>(i);
		}
		public InputFieldsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputFieldsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInputFieldsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInputFieldsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public InputFieldsDefinitionContext inputFieldsDefinition() {
		InputFieldsDefinitionContext _localctx = new InputFieldsDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_inputFieldsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(T__3);
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 633; inputValueDefinition();
				}
				}
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME) | (1L << STRING) | (1L << BLOCK_STRING))) != 0) );
			State = 638; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputObjectTypeExtensionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public InputFieldsDefinitionContext inputFieldsDefinition() {
			return GetRuleContext<InputFieldsDefinitionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InputObjectTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputObjectTypeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInputObjectTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInputObjectTypeExtension(this);
		}
	}

	[RuleVersion(0)]
	public InputObjectTypeExtensionContext inputObjectTypeExtension() {
		InputObjectTypeExtensionContext _localctx = new InputObjectTypeExtensionContext(Context, State);
		EnterRule(_localctx, 132, RULE_inputObjectTypeExtension);
		int _la;
		try {
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 640; Match(T__21);
				State = 641; Match(T__31);
				State = 642; name();
				State = 644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 643; directives();
					}
				}

				State = 646; inputFieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648; Match(T__21);
				State = 649; Match(T__31);
				State = 650; name();
				State = 651; directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DirectiveLocationsContext directiveLocations() {
			return GetRuleContext<DirectiveLocationsContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public DirectiveDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirectiveDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirectiveDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveDefinitionContext directiveDefinition() {
		DirectiveDefinitionContext _localctx = new DirectiveDefinitionContext(Context, State);
		EnterRule(_localctx, 134, RULE_directiveDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 655; description();
				}
			}

			State = 658; Match(T__32);
			State = 659; Match(T__19);
			State = 660; name();
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 661; argumentsDefinition();
				}
			}

			State = 664; Match(T__10);
			State = 665; directiveLocations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveLocationsContext : ParserRuleContext {
		public DirectiveLocationContext[] directiveLocation() {
			return GetRuleContexts<DirectiveLocationContext>();
		}
		public DirectiveLocationContext directiveLocation(int i) {
			return GetRuleContext<DirectiveLocationContext>(i);
		}
		public DirectiveLocationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveLocations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirectiveLocations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirectiveLocations(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveLocationsContext directiveLocations() {
		DirectiveLocationsContext _localctx = new DirectiveLocationsContext(Context, State);
		EnterRule(_localctx, 136, RULE_directiveLocations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667; directiveLocation();
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29) {
				{
				{
				State = 668; Match(T__29);
				State = 669; directiveLocation();
				}
				}
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveLocationContext : ParserRuleContext {
		public ExecutableDirectiveLocationContext executableDirectiveLocation() {
			return GetRuleContext<ExecutableDirectiveLocationContext>(0);
		}
		public TypeSystemDirectiveLocationContext typeSystemDirectiveLocation() {
			return GetRuleContext<TypeSystemDirectiveLocationContext>(0);
		}
		public DirectiveLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveLocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirectiveLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirectiveLocation(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveLocationContext directiveLocation() {
		DirectiveLocationContext _localctx = new DirectiveLocationContext(Context, State);
		EnterRule(_localctx, 138, RULE_directiveLocation);
		try {
			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675; executableDirectiveLocation();
				}
				break;
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
				EnterOuterAlt(_localctx, 2);
				{
				State = 676; typeSystemDirectiveLocation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutableDirectiveLocationContext : ParserRuleContext {
		public ExecutableDirectiveLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executableDirectiveLocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterExecutableDirectiveLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitExecutableDirectiveLocation(this);
		}
	}

	[RuleVersion(0)]
	public ExecutableDirectiveLocationContext executableDirectiveLocation() {
		ExecutableDirectiveLocationContext _localctx = new ExecutableDirectiveLocationContext(Context, State);
		EnterRule(_localctx, 140, RULE_executableDirectiveLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemDirectiveLocationContext : ParserRuleContext {
		public TypeSystemDirectiveLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemDirectiveLocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeSystemDirectiveLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeSystemDirectiveLocation(this);
		}
	}

	[RuleVersion(0)]
	public TypeSystemDirectiveLocationContext typeSystemDirectiveLocation() {
		TypeSystemDirectiveLocationContext _localctx = new TypeSystemDirectiveLocationContext(Context, State);
		EnterRule(_localctx, 142, RULE_typeSystemDirectiveLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 144, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << NAME))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49: return implementsInterfaces_sempred((ImplementsInterfacesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool implementsInterfaces_sempred(ImplementsInterfacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x43', '\x2B0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x3', '\x2', 
		'\x6', '\x2', '\x96', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x97', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x9D', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xA1', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xA5', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\xA8', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xAB', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\xB0', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x6', '\a', '\xB6', '\n', '\a', '\r', '\a', '\xE', '\a', '\xB7', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\xBF', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xC3', 
		'\n', '\t', '\x3', '\t', '\x5', '\t', '\xC6', '\n', '\t', '\x3', '\t', 
		'\x5', '\t', '\xC9', '\n', '\t', '\x3', '\n', '\x5', '\n', '\xCC', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x6', '\v', 
		'\xD2', '\n', '\v', '\r', '\v', '\xE', '\v', '\xD3', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xE2', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xE8', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF3', '\n', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\xF6', '\n', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x103', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x6', '\x1A', '\x115', '\n', 
		'\x1A', '\r', '\x1A', '\xE', '\x1A', '\x116', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x11B', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\a', 
		'\x1B', '\x11F', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x122', '\v', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x6', '\x1E', '\x12F', '\n', '\x1E', '\r', '\x1E', 
		'\xE', '\x1E', '\x130', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x139', '\n', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x140', '\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x144', '\n', 
		'!', '\x5', '!', '\x146', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x6', '$', '\x14F', 
		'\n', '$', '\r', '$', '\xE', '$', '\x150', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x155', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x15D', '\n', '\'', '\x3', '(', 
		'\x3', '(', '\x5', '(', '\x161', '\n', '(', '\x3', ')', '\x3', ')', '\x5', 
		')', '\x165', '\n', ')', '\x3', ')', '\x3', ')', '\x6', ')', '\x169', 
		'\n', ')', '\r', ')', '\xE', ')', '\x16A', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x176', '\n', '+', '\x3', '+', '\x3', '+', '\x6', '+', 
		'\x17A', '\n', '+', '\r', '+', '\xE', '+', '\x17B', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x183', '\n', '+', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x5', '.', '\x191', '\n', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x5', '/', '\x199', '\n', '/', '\x3', '\x30', 
		'\x5', '\x30', '\x19C', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x1A1', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x5', '\x32', 
		'\x1A9', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x1AE', '\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x1B1', 
		'\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x1B4', '\n', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x1B9', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\a', '\x33', '\x1C0', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x1C3', 
		'\v', '\x33', '\x3', '\x34', '\x3', '\x34', '\x6', '\x34', '\x1C7', '\n', 
		'\x34', '\r', '\x34', '\xE', '\x34', '\x1C8', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x35', '\x5', '\x35', '\x1CE', '\n', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x1D2', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x1D7', '\n', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x6', '\x36', '\x1DB', '\n', '\x36', '\r', '\x36', '\xE', '\x36', 
		'\x1DC', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x5', '\x37', '\x1E2', 
		'\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x1E8', '\n', '\x37', '\x3', '\x37', '\x5', '\x37', '\x1EB', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x5', '\x38', '\x1F1', '\n', '\x38', '\x3', '\x38', '\x5', '\x38', '\x1F4', 
		'\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x1FC', '\n', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x205', '\n', '\x38', '\x3', '\x39', 
		'\x5', '\x39', '\x208', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x20D', '\n', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x210', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x5', ':', '\x216', '\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x21F', '\n', ':', 
		'\x3', ';', '\x5', ';', '\x222', '\n', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x5', ';', '\x227', '\n', ';', '\x3', ';', '\x5', ';', '\x22A', 
		'\n', ';', '\x3', '<', '\x3', '<', '\x5', '<', '\x22E', '\n', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\a', '<', '\x233', '\n', '<', '\f', '<', 
		'\xE', '<', '\x236', '\v', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x23C', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x245', '\n', 
		'=', '\x3', '>', '\x5', '>', '\x248', '\n', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x5', '>', '\x24D', '\n', '>', '\x3', '>', '\x5', '>', '\x250', 
		'\n', '>', '\x3', '?', '\x3', '?', '\x6', '?', '\x254', '\n', '?', '\r', 
		'?', '\xE', '?', '\x255', '\x3', '?', '\x3', '?', '\x3', '@', '\x5', '@', 
		'\x25B', '\n', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x25F', '\n', 
		'@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', 
		'\x41', '\x265', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', 
		'\x26E', '\n', '\x41', '\x3', '\x42', '\x5', '\x42', '\x271', '\n', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x276', '\n', 
		'\x42', '\x3', '\x42', '\x5', '\x42', '\x279', '\n', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x6', '\x43', '\x27D', '\n', '\x43', '\r', '\x43', '\xE', 
		'\x43', '\x27E', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x287', '\n', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x290', '\n', '\x44', '\x3', '\x45', 
		'\x5', '\x45', '\x293', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x299', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\a', '\x46', '\x2A1', '\n', '\x46', '\f', '\x46', '\xE', '\x46', '\x2A4', 
		'\v', '\x46', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x2A8', '\n', 'G', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x2', '\x3', '\x64', 'K', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x2', 
		'\b', '\x3', '\x2', '\x3', '\x5', '\x3', '\x2', '\xE', '\xF', '\x3', '\x2', 
		'\x37', '\x38', '\x3', '\x2', '$', '*', '\x3', '\x2', '+', '\x35', '\a', 
		'\x2', '\x17', '\x18', '\x1A', '\x1C', '\x1E', '\x1F', '!', '\"', '\x36', 
		'\x36', '\x2', '\x2D1', '\x2', '\x95', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x6', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\xAF', '\x3', '\x2', '\x2', '\x2', '\n', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\x10', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x14', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xED', '\x3', '\x2', '\x2', '\x2', '\"', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x104', '\x3', '\x2', '\x2', '\x2', '(', '\x106', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x108', '\x3', '\x2', '\x2', '\x2', ',', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x32', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x36', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x129', '\x3', '\x2', '\x2', '\x2', 
		':', '\x12C', '\x3', '\x2', '\x2', '\x2', '<', '\x134', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x13A', '\x3', '\x2', '\x2', '\x2', '@', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x149', '\x3', '\x2', '\x2', '\x2', '\x46', '\x14E', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x152', '\x3', '\x2', '\x2', '\x2', 'J', '\x156', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x160', '\x3', '\x2', '\x2', '\x2', 'P', '\x162', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x16E', '\x3', '\x2', '\x2', '\x2', 'T', '\x182', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x188', '\x3', '\x2', '\x2', '\x2', 'Z', '\x190', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x198', '\x3', '\x2', '\x2', '\x2', '^', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1B5', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x1C4', '\x3', '\x2', '\x2', '\x2', 'h', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x1E1', '\x3', '\x2', '\x2', '\x2', 'n', '\x204', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x207', '\x3', '\x2', '\x2', '\x2', 'r', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x22B', '\x3', '\x2', '\x2', '\x2', 'x', '\x244', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x247', '\x3', '\x2', '\x2', '\x2', '|', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x82', '\x270', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x86', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x292', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x2A7', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x90', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x96', '\x5', '\x4', '\x3', '\x2', '\x95', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x3', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9D', '\x5', '\x6', 
		'\x4', '\x2', '\x9A', '\x9D', '\x5', 'L', '\'', '\x2', '\x9B', '\x9D', 
		'\x5', 'N', '(', '\x2', '\x9C', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x5', 
		'\b', '\x5', '\x2', '\x9F', '\xA1', '\x5', '\x1C', '\xF', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\a', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x5', 
		'\n', '\x6', '\x2', '\xA3', '\xA5', '\x5', '\x92', 'J', '\x2', '\xA4', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\x5', 
		':', '\x1E', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\x46', '$', '\x2', '\xAA', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\f', '\a', 
		'\x2', '\xAD', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\x5', 
		'\f', '\a', '\x2', '\xAF', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\t', '\x2', '\x2', '\x2', '\xB2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\a', '\x6', '\x2', '\x2', '\xB4', 
		'\xB6', '\x5', '\xE', '\b', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\a', '\x2', 
		'\x2', '\xBA', '\r', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBF', '\x5', 
		'\x10', '\t', '\x2', '\xBC', '\xBF', '\x5', '\x1A', '\xE', '\x2', '\xBD', 
		'\xBF', '\x5', '\"', '\x12', '\x2', '\xBE', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xF', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC2', '\x5', '\x12', '\n', '\x2', '\xC1', '\xC3', '\x5', '\x14', '\v', 
		'\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC6', '\x5', '\x46', '$', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC9', '\x5', '\f', '\a', '\x2', '\xC8', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\x11', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\x5', 
		'\x18', '\r', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCE', '\x5', '\x92', 'J', '\x2', '\xCE', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD1', '\a', '\b', '\x2', '\x2', '\xD0', 
		'\xD2', '\x5', '\x16', '\f', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\t', '\x2', 
		'\x2', '\xD6', '\x15', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', 
		'\x92', 'J', '\x2', '\xD8', '\xD9', '\a', '\n', '\x2', '\x2', '\xD9', 
		'\xDA', '\x5', '$', '\x13', '\x2', '\xDA', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x5', '\x92', 'J', '\x2', '\xDC', '\xDD', '\a', 
		'\n', '\x2', '\x2', '\xDD', '\x19', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\v', '\x2', '\x2', '\xDF', '\xE1', '\x5', '\x1E', '\x10', 
		'\x2', '\xE0', '\xE2', '\x5', '\x46', '$', '\x2', '\xE1', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '\f', '\x2', 
		'\x2', '\xE4', '\xE5', '\x5', '\x1E', '\x10', '\x2', '\xE5', '\xE7', '\x5', 
		' ', '\x11', '\x2', '\xE6', '\xE8', '\x5', '\x46', '$', '\x2', '\xE7', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x5', 
		'\f', '\a', '\x2', '\xEA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\x5', '\x92', 'J', '\x2', '\xEC', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\a', '\r', '\x2', '\x2', '\xEE', '\xEF', '\x5', 
		'\x42', '\"', '\x2', '\xEF', '!', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF2', '\a', '\v', '\x2', '\x2', '\xF1', '\xF3', '\x5', ' ', '\x11', 
		'\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF6', '\x5', '\x46', '$', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\f', '\a', '\x2', '\xF8', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xF9', '\x103', '\x5', '\x38', '\x1D', 
		'\x2', '\xFA', '\x103', '\x5', '&', '\x14', '\x2', '\xFB', '\x103', '\x5', 
		'(', '\x15', '\x2', '\xFC', '\x103', '\x5', ',', '\x17', '\x2', '\xFD', 
		'\x103', '\x5', '*', '\x16', '\x2', '\xFE', '\x103', '\x5', '.', '\x18', 
		'\x2', '\xFF', '\x103', '\x5', '\x30', '\x19', '\x2', '\x100', '\x103', 
		'\x5', '\x32', '\x1A', '\x2', '\x101', '\x103', '\x5', '\x34', '\x1B', 
		'\x2', '\x102', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x105', '\a', ';', '\x2', '\x2', '\x105', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x107', '\a', ':', '\x2', '\x2', '\x107', 
		')', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\t', '\x3', '\x2', 
		'\x2', '\x109', '+', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\t', 
		'\x4', '\x2', '\x2', '\x10B', '-', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\a', '\x10', '\x2', '\x2', '\x10D', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\x5', '\x92', 'J', '\x2', '\x10F', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\x11', '\x2', '\x2', '\x111', 
		'\x11B', '\a', '\x12', '\x2', '\x2', '\x112', '\x114', '\a', '\x11', '\x2', 
		'\x2', '\x113', '\x115', '\x5', '$', '\x13', '\x2', '\x114', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\a', '\x12', '\x2', '\x2', '\x119', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x110', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x120', '\a', '\x6', '\x2', '\x2', '\x11D', '\x11F', '\x5', 
		'\x36', '\x1C', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\a', '\a', '\x2', '\x2', '\x124', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x125', '\x126', '\x5', '\x92', 'J', '\x2', '\x126', '\x127', 
		'\a', '\n', '\x2', '\x2', '\x127', '\x128', '\x5', '$', '\x13', '\x2', 
		'\x128', '\x37', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '\x13', 
		'\x2', '\x2', '\x12A', '\x12B', '\x5', '\x92', 'J', '\x2', '\x12B', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12E', '\a', '\b', '\x2', '\x2', 
		'\x12D', '\x12F', '\x5', '<', '\x1F', '\x2', '\x12E', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', 
		'\a', '\t', '\x2', '\x2', '\x133', ';', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x135', '\x5', '\x38', '\x1D', '\x2', '\x135', '\x136', '\a', '\n', '\x2', 
		'\x2', '\x136', '\x138', '\x5', '@', '!', '\x2', '\x137', '\x139', '\x5', 
		'>', ' ', '\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13B', '\a', '\x14', '\x2', '\x2', '\x13B', '\x13C', 
		'\x5', '$', '\x13', '\x2', '\x13C', '?', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13F', '\x5', '\x42', '\"', '\x2', '\x13E', '\x140', '\a', '\x15', '\x2', 
		'\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x143', '\x5', '\x44', '#', '\x2', '\x142', '\x144', '\a', '\x15', 
		'\x2', '\x2', '\x143', '\x142', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x145', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x41', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x148', '\x5', '\x92', 'J', '\x2', '\x148', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14A', '\a', '\x11', '\x2', '\x2', '\x14A', '\x14B', 
		'\x5', '@', '!', '\x2', '\x14B', '\x14C', '\a', '\x12', '\x2', '\x2', 
		'\x14C', '\x45', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14F', '\x5', 
		'H', '%', '\x2', '\x14E', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x154', '\x5', 'J', '&', '\x2', '\x153', 
		'\x155', '\x5', '\x14', '\v', '\x2', '\x154', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\a', '\x16', '\x2', '\x2', '\x157', 
		'\x158', '\x5', '\x92', 'J', '\x2', '\x158', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15D', '\x5', 'P', ')', '\x2', '\x15A', '\x15D', '\x5', 
		'Z', '.', '\x2', '\x15B', '\x15D', '\x5', '\x88', '\x45', '\x2', '\x15C', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x161', '\x5', 'T', '+', '\x2', '\x15F', 
		'\x161', '\x5', '\\', '/', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x161', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x164', '\a', '\x17', '\x2', '\x2', '\x163', 
		'\x165', '\x5', '\x46', '$', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x168', '\a', '\x6', '\x2', '\x2', 
		'\x167', '\x169', '\x5', 'R', '*', '\x2', '\x168', '\x167', '\x3', '\x2', 
		'\x2', '\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', 
		'\a', '\x2', '\x2', '\x16D', 'Q', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\x5', '\n', '\x6', '\x2', '\x16F', '\x170', '\a', '\n', '\x2', 
		'\x2', '\x170', '\x171', '\x5', '\x42', '\"', '\x2', '\x171', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x173', '\a', '\x18', '\x2', '\x2', '\x173', 
		'\x175', '\a', '\x17', '\x2', '\x2', '\x174', '\x176', '\x5', '\x46', 
		'$', '\x2', '\x175', '\x174', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x179', '\a', '\x6', '\x2', '\x2', '\x178', '\x17A', '\x5', 
		'V', ',', '\x2', '\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\a', '\a', '\x2', '\x2', 
		'\x17E', '\x183', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\a', 
		'\x18', '\x2', '\x2', '\x180', '\x181', '\a', '\x17', '\x2', '\x2', '\x181', 
		'\x183', '\x5', '\x46', '$', '\x2', '\x182', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x183', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x185', '\x5', '\n', '\x6', '\x2', '\x185', 
		'\x186', '\a', '\n', '\x2', '\x2', '\x186', '\x187', '\x5', '\x42', '\"', 
		'\x2', '\x187', 'W', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\x5', 
		',', '\x17', '\x2', '\x189', 'Y', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x191', '\x5', '^', '\x30', '\x2', '\x18B', '\x191', '\x5', '\x62', '\x32', 
		'\x2', '\x18C', '\x191', '\x5', 'p', '\x39', '\x2', '\x18D', '\x191', 
		'\x5', 't', ';', '\x2', '\x18E', '\x191', '\x5', 'z', '>', '\x2', '\x18F', 
		'\x191', '\x5', '\x82', '\x42', '\x2', '\x190', '\x18A', '\x3', '\x2', 
		'\x2', '\x2', '\x190', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x190', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '[', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x199', '\x5', '`', '\x31', '\x2', '\x193', '\x199', '\x5', 'n', '\x38', 
		'\x2', '\x194', '\x199', '\x5', 'r', ':', '\x2', '\x195', '\x199', '\x5', 
		'x', '=', '\x2', '\x196', '\x199', '\x5', '\x80', '\x41', '\x2', '\x197', 
		'\x199', '\x5', '\x86', '\x44', '\x2', '\x198', '\x192', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x193', '\x3', '\x2', '\x2', '\x2', '\x198', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x198', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x199', ']', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x19C', '\x5', 'X', '-', '\x2', '\x19B', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\a', '\x19', '\x2', '\x2', 
		'\x19E', '\x1A0', '\x5', '\x92', 'J', '\x2', '\x19F', '\x1A1', '\x5', 
		'\x46', '$', '\x2', '\x1A0', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A3', '\a', '\x1A', '\x2', '\x2', '\x1A3', '\x1A4', 
		'\a', '\x19', '\x2', '\x2', '\x1A4', '\x1A5', '\x5', '\x92', 'J', '\x2', 
		'\x1A5', '\x1A6', '\x5', '\x46', '$', '\x2', '\x1A6', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x1A7', '\x1A9', '\x5', 'X', '-', '\x2', '\x1A8', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 
		'\x1B', '\x2', '\x2', '\x1AB', '\x1AD', '\x5', '\x92', 'J', '\x2', '\x1AC', 
		'\x1AE', '\x5', '\x64', '\x33', '\x2', '\x1AD', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B1', '\x5', '\x46', '$', '\x2', 
		'\x1B0', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1B4', '\x5', '\x66', '\x34', '\x2', '\x1B3', '\x1B2', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\b', '\x33', '\x1', '\x2', 
		'\x1B6', '\x1B8', '\a', '\x1C', '\x2', '\x2', '\x1B7', '\x1B9', '\a', 
		'\x1D', '\x2', '\x2', '\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\x5', '\x42', '\"', '\x2', '\x1BB', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\f', '\x3', '\x2', '\x2', 
		'\x1BD', '\x1BE', '\a', '\x1D', '\x2', '\x2', '\x1BE', '\x1C0', '\x5', 
		'\x42', '\"', '\x2', '\x1BF', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C6', '\a', '\x6', '\x2', '\x2', '\x1C5', '\x1C7', '\x5', 
		'h', '\x35', '\x2', '\x1C6', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\a', '\x2', '\x2', 
		'\x1CB', 'g', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CE', '\x5', 'X', 
		'-', '\x2', '\x1CD', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D1', '\x5', '\x92', 'J', '\x2', '\x1D0', '\x1D2', '\x5', 
		'j', '\x36', '\x2', '\x1D1', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D4', '\a', '\n', '\x2', '\x2', '\x1D4', '\x1D6', '\x5', 
		'@', '!', '\x2', '\x1D5', '\x1D7', '\x5', '\x46', '$', '\x2', '\x1D6', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\x3', '\x2', '\x2', 
		'\x2', '\x1D7', 'i', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1DA', '\a', 
		'\b', '\x2', '\x2', '\x1D9', '\x1DB', '\x5', 'l', '\x37', '\x2', '\x1DA', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1DF', '\a', '\t', '\x2', '\x2', '\x1DF', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x1E2', '\x5', 'X', '-', '\x2', '\x1E1', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', 
		'\x92', 'J', '\x2', '\x1E4', '\x1E5', '\a', '\n', '\x2', '\x2', '\x1E5', 
		'\x1E7', '\x5', '@', '!', '\x2', '\x1E6', '\x1E8', '\x5', '>', ' ', '\x2', 
		'\x1E7', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1EB', '\x5', '\x46', '$', '\x2', '\x1EA', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x18', '\x2', '\x2', '\x1ED', 
		'\x1EE', '\a', '\x1B', '\x2', '\x2', '\x1EE', '\x1F0', '\x5', '\x92', 
		'J', '\x2', '\x1EF', '\x1F1', '\x5', '\x64', '\x33', '\x2', '\x1F0', '\x1EF', 
		'\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x1F1', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F4', '\x5', 
		'\x46', '$', '\x2', '\x1F3', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F3', 
		'\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1F6', '\x5', '\x66', '\x34', '\x2', '\x1F6', '\x205', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\a', '\x18', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\a', '\x1B', '\x2', '\x2', '\x1F9', '\x1FB', '\x5', 
		'\x92', 'J', '\x2', '\x1FA', '\x1FC', '\x5', '\x64', '\x33', '\x2', '\x1FB', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', 
		'\x5', '\x46', '$', '\x2', '\x1FE', '\x205', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF', '\x200', '\a', '\x18', '\x2', '\x2', '\x200', '\x201', '\a', 
		'\x1B', '\x2', '\x2', '\x201', '\x202', '\x5', '\x92', 'J', '\x2', '\x202', 
		'\x203', '\x5', '\x64', '\x33', '\x2', '\x203', '\x205', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x204', '\x1F7', 
		'\x3', '\x2', '\x2', '\x2', '\x204', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'\x205', 'o', '\x3', '\x2', '\x2', '\x2', '\x206', '\x208', '\x5', 'X', 
		'-', '\x2', '\x207', '\x206', '\x3', '\x2', '\x2', '\x2', '\x207', '\x208', 
		'\x3', '\x2', '\x2', '\x2', '\x208', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x209', '\x20A', '\a', '\x1E', '\x2', '\x2', '\x20A', '\x20C', '\x5', 
		'\x92', 'J', '\x2', '\x20B', '\x20D', '\x5', '\x46', '$', '\x2', '\x20C', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20D', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x210', 
		'\x5', '\x66', '\x34', '\x2', '\x20F', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x20F', '\x210', '\x3', '\x2', '\x2', '\x2', '\x210', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x211', '\x212', '\a', '\x18', '\x2', '\x2', '\x212', '\x213', 
		'\a', '\x1E', '\x2', '\x2', '\x213', '\x215', '\x5', '\x92', 'J', '\x2', 
		'\x214', '\x216', '\x5', '\x46', '$', '\x2', '\x215', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x215', '\x216', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\x5', '\x66', 
		'\x34', '\x2', '\x218', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\a', '\x18', '\x2', '\x2', '\x21A', '\x21B', '\a', '\x1E', '\x2', 
		'\x2', '\x21B', '\x21C', '\x5', '\x92', 'J', '\x2', '\x21C', '\x21D', 
		'\x5', '\x46', '$', '\x2', '\x21D', '\x21F', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x211', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', 's', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x222', '\x5', 'X', '-', '\x2', '\x221', '\x220', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', 
		'\x3', '\x2', '\x2', '\x2', '\x223', '\x224', '\a', '\x1F', '\x2', '\x2', 
		'\x224', '\x226', '\x5', '\x92', 'J', '\x2', '\x225', '\x227', '\x5', 
		'\x46', '$', '\x2', '\x226', '\x225', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x227', '\x229', '\x3', '\x2', '\x2', 
		'\x2', '\x228', '\x22A', '\x5', 'v', '<', '\x2', '\x229', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22D', '\a', '\x14', '\x2', 
		'\x2', '\x22C', '\x22E', '\a', ' ', '\x2', '\x2', '\x22D', '\x22C', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x234', '\x5', '\x42', 
		'\"', '\x2', '\x230', '\x231', '\a', ' ', '\x2', '\x2', '\x231', '\x233', 
		'\x5', '\x42', '\"', '\x2', '\x232', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x236', '\x3', '\x2', '\x2', '\x2', '\x234', '\x232', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\x235', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x236', '\x234', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x238', '\a', '\x18', '\x2', '\x2', '\x238', '\x239', 
		'\a', '\x1F', '\x2', '\x2', '\x239', '\x23B', '\x5', '\x92', 'J', '\x2', 
		'\x23A', '\x23C', '\x5', '\x46', '$', '\x2', '\x23B', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x5', 'v', '<', 
		'\x2', '\x23E', '\x245', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', 
		'\a', '\x18', '\x2', '\x2', '\x240', '\x241', '\a', '\x1F', '\x2', '\x2', 
		'\x241', '\x242', '\x5', '\x92', 'J', '\x2', '\x242', '\x243', '\x5', 
		'\x46', '$', '\x2', '\x243', '\x245', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x244', '\x23F', '\x3', '\x2', '\x2', 
		'\x2', '\x245', 'y', '\x3', '\x2', '\x2', '\x2', '\x246', '\x248', '\x5', 
		'X', '-', '\x2', '\x247', '\x246', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x249', '\x24A', '\a', '!', '\x2', '\x2', '\x24A', '\x24C', '\x5', 
		'\x92', 'J', '\x2', '\x24B', '\x24D', '\x5', '\x46', '$', '\x2', '\x24C', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x24D', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x250', 
		'\x5', '|', '?', '\x2', '\x24F', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\x24F', '\x250', '\x3', '\x2', '\x2', '\x2', '\x250', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x251', '\x253', '\a', '\x6', '\x2', '\x2', '\x252', '\x254', 
		'\x5', '~', '@', '\x2', '\x253', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\x3', '\x2', '\x2', '\x2', '\x255', '\x253', '\x3', 
		'\x2', '\x2', '\x2', '\x255', '\x256', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\a', '\a', '\x2', 
		'\x2', '\x258', '}', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25B', '\x5', 
		'X', '-', '\x2', '\x25A', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\x3', '\x2', '\x2', 
		'\x2', '\x25C', '\x25E', '\x5', '\x30', '\x19', '\x2', '\x25D', '\x25F', 
		'\x5', '\x46', '$', '\x2', '\x25E', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x25E', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x260', '\x261', '\a', '\x18', '\x2', '\x2', '\x261', 
		'\x262', '\a', '!', '\x2', '\x2', '\x262', '\x264', '\x5', '\x92', 'J', 
		'\x2', '\x263', '\x265', '\x5', '\x46', '$', '\x2', '\x264', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'\x265', '\x266', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\x5', 
		'|', '?', '\x2', '\x267', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x268', 
		'\x269', '\a', '\x18', '\x2', '\x2', '\x269', '\x26A', '\a', '!', '\x2', 
		'\x2', '\x26A', '\x26B', '\x5', '\x92', 'J', '\x2', '\x26B', '\x26C', 
		'\x5', '\x46', '$', '\x2', '\x26C', '\x26E', '\x3', '\x2', '\x2', '\x2', 
		'\x26D', '\x260', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x26E', '\x81', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'\x271', '\x5', 'X', '-', '\x2', '\x270', '\x26F', '\x3', '\x2', '\x2', 
		'\x2', '\x270', '\x271', '\x3', '\x2', '\x2', '\x2', '\x271', '\x272', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x273', '\a', '\"', '\x2', '\x2', 
		'\x273', '\x275', '\x5', '\x92', 'J', '\x2', '\x274', '\x276', '\x5', 
		'\x46', '$', '\x2', '\x275', '\x274', '\x3', '\x2', '\x2', '\x2', '\x275', 
		'\x276', '\x3', '\x2', '\x2', '\x2', '\x276', '\x278', '\x3', '\x2', '\x2', 
		'\x2', '\x277', '\x279', '\x5', '\x84', '\x43', '\x2', '\x278', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x83', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27C', '\a', '\x6', 
		'\x2', '\x2', '\x27B', '\x27D', '\x5', 'l', '\x37', '\x2', '\x27C', '\x27B', 
		'\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', '\x280', 
		'\x281', '\a', '\a', '\x2', '\x2', '\x281', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x282', '\x283', '\a', '\x18', '\x2', '\x2', '\x283', '\x284', 
		'\a', '\"', '\x2', '\x2', '\x284', '\x286', '\x5', '\x92', 'J', '\x2', 
		'\x285', '\x287', '\x5', '\x46', '$', '\x2', '\x286', '\x285', '\x3', 
		'\x2', '\x2', '\x2', '\x286', '\x287', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'\x288', '\x3', '\x2', '\x2', '\x2', '\x288', '\x289', '\x5', '\x84', 
		'\x43', '\x2', '\x289', '\x290', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\x28B', '\a', '\x18', '\x2', '\x2', '\x28B', '\x28C', '\a', '\"', '\x2', 
		'\x2', '\x28C', '\x28D', '\x5', '\x92', 'J', '\x2', '\x28D', '\x28E', 
		'\x5', '\x46', '$', '\x2', '\x28E', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x282', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28A', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x87', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x293', '\x5', 'X', '-', '\x2', '\x292', '\x291', '\x3', '\x2', '\x2', 
		'\x2', '\x292', '\x293', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\a', '#', '\x2', '\x2', 
		'\x295', '\x296', '\a', '\x16', '\x2', '\x2', '\x296', '\x298', '\x5', 
		'\x92', 'J', '\x2', '\x297', '\x299', '\x5', 'j', '\x36', '\x2', '\x298', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\x3', '\x2', '\x2', 
		'\x2', '\x299', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', 
		'\a', '\r', '\x2', '\x2', '\x29B', '\x29C', '\x5', '\x8A', '\x46', '\x2', 
		'\x29C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x2A2', '\x5', 
		'\x8C', 'G', '\x2', '\x29E', '\x29F', '\a', ' ', '\x2', '\x2', '\x29F', 
		'\x2A1', '\x5', '\x8C', 'G', '\x2', '\x2A0', '\x29E', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', 
		'\x2A3', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A2', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x2A8', '\x5', '\x8E', 'H', '\x2', '\x2A6', 
		'\x2A8', '\x5', '\x90', 'I', '\x2', '\x2A7', '\x2A5', '\x3', '\x2', '\x2', 
		'\x2', '\x2A7', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\t', '\x5', '\x2', '\x2', 
		'\x2AA', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\t', '\x6', 
		'\x2', '\x2', '\x2AC', '\x91', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', 
		'\t', '\a', '\x2', '\x2', '\x2AE', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x97', '\x9C', '\xA0', '\xA4', '\xA7', '\xAA', '\xAF', '\xB7', '\xBE', 
		'\xC2', '\xC5', '\xC8', '\xCB', '\xD3', '\xE1', '\xE7', '\xF2', '\xF5', 
		'\x102', '\x116', '\x11A', '\x120', '\x130', '\x138', '\x13F', '\x143', 
		'\x145', '\x150', '\x154', '\x15C', '\x160', '\x164', '\x16A', '\x175', 
		'\x17B', '\x182', '\x190', '\x198', '\x19B', '\x1A0', '\x1A8', '\x1AD', 
		'\x1B0', '\x1B3', '\x1B8', '\x1C1', '\x1C8', '\x1CD', '\x1D1', '\x1D6', 
		'\x1DC', '\x1E1', '\x1E7', '\x1EA', '\x1F0', '\x1F3', '\x1FB', '\x204', 
		'\x207', '\x20C', '\x20F', '\x215', '\x21E', '\x221', '\x226', '\x229', 
		'\x22D', '\x234', '\x23B', '\x244', '\x247', '\x24C', '\x24F', '\x255', 
		'\x25A', '\x25E', '\x264', '\x26D', '\x270', '\x275', '\x278', '\x27E', 
		'\x286', '\x28F', '\x292', '\x298', '\x2A2', '\x2A7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GraphqlToTsql.CodeGen.Gql
