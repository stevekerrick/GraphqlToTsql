//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LookML.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphqlToTsql.CodeGen.LookML {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LookMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VIEW=1, SQL_TABLE_NAME=2, FIELD=3, SQL=4, LABEL=5, VIEW_LABEL=6, TYPE=7, 
		LINK=8, URL=9, DESCRIPTION=10, DRILL_FIELDS=11, DERIVED_TABLE=12, SQL_TRIGGER_VALUE=13, 
		SORTKEYS=14, STRING=15, QUOTED_STRING=16, TABLE_REF=17, WS=18, COMMENT=19, 
		DELIM=20, SEP=21, LBRACE=22, RBRACE=23;
	public const int
		RULE_lookml = 0, RULE_view = 1, RULE_sql_table_name = 2, RULE_derived_table = 3, 
		RULE_derived_table_pair = 4, RULE_field = 5, RULE_pair = 6, RULE_array_key = 7, 
		RULE_array = 8, RULE_key = 9, RULE_value = 10, RULE_statement = 11, RULE_comment = 12;
	public static readonly string[] ruleNames = {
		"lookml", "view", "sql_table_name", "derived_table", "derived_table_pair", 
		"field", "pair", "array_key", "array", "key", "value", "statement", "comment"
	};

	private static readonly string[] _LiteralNames = {
		null, "'view'", "'sql_table_name'", null, "'sql'", "'label'", "'view_label'", 
		"'type'", "'link'", "'url'", "'description'", "'drill_fields'", "'derived_table'", 
		"'sql_trigger_value'", "'sortkeys'", null, null, null, null, null, "';;'", 
		"':'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VIEW", "SQL_TABLE_NAME", "FIELD", "SQL", "LABEL", "VIEW_LABEL", 
		"TYPE", "LINK", "URL", "DESCRIPTION", "DRILL_FIELDS", "DERIVED_TABLE", 
		"SQL_TRIGGER_VALUE", "SORTKEYS", "STRING", "QUOTED_STRING", "TABLE_REF", 
		"WS", "COMMENT", "DELIM", "SEP", "LBRACE", "RBRACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LookML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LookMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LookMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LookMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LookmlContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LookMLParser.Eof, 0); }
		public ViewContext[] view() {
			return GetRuleContexts<ViewContext>();
		}
		public ViewContext view(int i) {
			return GetRuleContext<ViewContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public LookmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterLookml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitLookml(this);
		}
	}

	[RuleVersion(0)]
	public LookmlContext lookml() {
		LookmlContext _localctx = new LookmlContext(Context, State);
		EnterRule(_localctx, 0, RULE_lookml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VIEW || _la==COMMENT) {
				{
				State = 28;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VIEW:
					{
					State = 26; view();
					}
					break;
				case COMMENT:
					{
					State = 27; comment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewContext : ParserRuleContext {
		public ITerminalNode VIEW() { return GetToken(LookMLParser.VIEW, 0); }
		public ITerminalNode SEP() { return GetToken(LookMLParser.SEP, 0); }
		public ITerminalNode STRING() { return GetToken(LookMLParser.STRING, 0); }
		public ITerminalNode LBRACE() { return GetToken(LookMLParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LookMLParser.RBRACE, 0); }
		public Sql_table_nameContext sql_table_name() {
			return GetRuleContext<Sql_table_nameContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitView(this);
		}
	}

	[RuleVersion(0)]
	public ViewContext view() {
		ViewContext _localctx = new ViewContext(Context, State);
		EnterRule(_localctx, 2, RULE_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(VIEW);
			State = 36; Match(SEP);
			State = 37; Match(STRING);
			State = 38; Match(LBRACE);
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL_TABLE_NAME:
				{
				State = 39; sql_table_name();
				}
				break;
			case DERIVED_TABLE:
				{
				State = 40; derived_table();
				}
				break;
			case FIELD:
			case SQL:
			case LBRACE:
			case RBRACE:
				break;
			default:
				break;
			}
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIELD) | (1L << SQL) | (1L << LBRACE))) != 0)) {
				{
				{
				State = 43; field();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_table_nameContext : ParserRuleContext {
		public ITerminalNode SQL_TABLE_NAME() { return GetToken(LookMLParser.SQL_TABLE_NAME, 0); }
		public ITerminalNode SEP() { return GetToken(LookMLParser.SEP, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode DELIM() { return GetToken(LookMLParser.DELIM, 0); }
		public Sql_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterSql_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitSql_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Sql_table_nameContext sql_table_name() {
		Sql_table_nameContext _localctx = new Sql_table_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(SQL_TABLE_NAME);
			State = 52; Match(SEP);
			State = 53; statement();
			State = 54; Match(DELIM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public ITerminalNode DERIVED_TABLE() { return GetToken(LookMLParser.DERIVED_TABLE, 0); }
		public ITerminalNode SEP() { return GetToken(LookMLParser.SEP, 0); }
		public ITerminalNode LBRACE() { return GetToken(LookMLParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LookMLParser.RBRACE, 0); }
		public Derived_table_pairContext[] derived_table_pair() {
			return GetRuleContexts<Derived_table_pairContext>();
		}
		public Derived_table_pairContext derived_table_pair(int i) {
			return GetRuleContext<Derived_table_pairContext>(i);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(Context, State);
		EnterRule(_localctx, 6, RULE_derived_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(DERIVED_TABLE);
			State = 57; Match(SEP);
			State = 58; Match(LBRACE);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SQL) | (1L << DRILL_FIELDS) | (1L << SQL_TRIGGER_VALUE) | (1L << SORTKEYS))) != 0)) {
				{
				{
				State = 59; derived_table_pair();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_table_pairContext : ParserRuleContext {
		public ITerminalNode SQL() { return GetToken(LookMLParser.SQL, 0); }
		public ITerminalNode SEP() { return GetToken(LookMLParser.SEP, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode DELIM() { return GetToken(LookMLParser.DELIM, 0); }
		public Array_keyContext array_key() {
			return GetRuleContext<Array_keyContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode SQL_TRIGGER_VALUE() { return GetToken(LookMLParser.SQL_TRIGGER_VALUE, 0); }
		public Derived_table_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterDerived_table_pair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitDerived_table_pair(this);
		}
	}

	[RuleVersion(0)]
	public Derived_table_pairContext derived_table_pair() {
		Derived_table_pairContext _localctx = new Derived_table_pairContext(Context, State);
		EnterRule(_localctx, 8, RULE_derived_table_pair);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; Match(SQL);
				State = 68; Match(SEP);
				State = 69; statement();
				State = 70; Match(DELIM);
				}
				break;
			case DRILL_FIELDS:
			case SORTKEYS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; array_key();
				State = 73; Match(SEP);
				State = 74; array();
				}
				break;
			case SQL_TRIGGER_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; Match(SQL_TRIGGER_VALUE);
				State = 77; Match(SEP);
				State = 78; statement();
				State = 79; Match(DELIM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode FIELD() { return GetToken(LookMLParser.FIELD, 0); }
		public ITerminalNode SEP() { return GetToken(LookMLParser.SEP, 0); }
		public ITerminalNode STRING() { return GetToken(LookMLParser.STRING, 0); }
		public ITerminalNode LBRACE() { return GetToken(LookMLParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LookMLParser.RBRACE, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode SQL() { return GetToken(LookMLParser.SQL, 0); }
		public ITerminalNode TABLE_REF() { return GetToken(LookMLParser.TABLE_REF, 0); }
		public ITerminalNode DELIM() { return GetToken(LookMLParser.DELIM, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 10, RULE_field);
		int _la;
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; Match(FIELD);
				State = 84; Match(SEP);
				State = 85; Match(STRING);
				State = 86; Match(LBRACE);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SQL) | (1L << LABEL) | (1L << VIEW_LABEL) | (1L << TYPE) | (1L << LINK) | (1L << URL) | (1L << DESCRIPTION) | (1L << DRILL_FIELDS) | (1L << SORTKEYS))) != 0)) {
					{
					{
					State = 87; pair();
					}
					}
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 93; Match(RBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; Match(LBRACE);
				State = 95; Match(RBRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; Match(SQL);
				State = 97; Match(SEP);
				State = 98; Match(TABLE_REF);
				State = 99; Match(DELIM);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100; Match(SQL);
				State = 101; Match(SEP);
				State = 102; statement();
				State = 103; Match(DELIM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode SEP() { return GetToken(LookMLParser.SEP, 0); }
		public ITerminalNode LBRACE() { return GetToken(LookMLParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LookMLParser.RBRACE, 0); }
		public ITerminalNode STRING() { return GetToken(LookMLParser.STRING, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public Array_keyContext array_key() {
			return GetRuleContext<Array_keyContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode DELIM() { return GetToken(LookMLParser.DELIM, 0); }
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 12, RULE_pair);
		int _la;
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; key();
				State = 108; Match(SEP);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING) {
					{
					State = 109; Match(STRING);
					}
				}

				State = 112; Match(LBRACE);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SQL) | (1L << LABEL) | (1L << VIEW_LABEL) | (1L << TYPE) | (1L << LINK) | (1L << URL) | (1L << DESCRIPTION) | (1L << DRILL_FIELDS) | (1L << SORTKEYS))) != 0)) {
					{
					{
					State = 113; pair();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 119; Match(RBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; array_key();
				State = 122; Match(SEP);
				State = 123; array();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; key();
				State = 126; Match(SEP);
				State = 127; value();
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DELIM) {
					{
					State = 128; Match(DELIM);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_keyContext : ParserRuleContext {
		public ITerminalNode DRILL_FIELDS() { return GetToken(LookMLParser.DRILL_FIELDS, 0); }
		public ITerminalNode SORTKEYS() { return GetToken(LookMLParser.SORTKEYS, 0); }
		public Array_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterArray_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitArray_key(this);
		}
	}

	[RuleVersion(0)]
	public Array_keyContext array_key() {
		Array_keyContext _localctx = new Array_keyContext(Context, State);
		EnterRule(_localctx, 14, RULE_array_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==DRILL_FIELDS || _la==SORTKEYS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode[] STRING() { return GetTokens(LookMLParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(LookMLParser.STRING, i);
		}
		public ITerminalNode[] QUOTED_STRING() { return GetTokens(LookMLParser.QUOTED_STRING); }
		public ITerminalNode QUOTED_STRING(int i) {
			return GetToken(LookMLParser.QUOTED_STRING, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 16, RULE_array);
		int _la;
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING) {
					{
					{
					State = 135; Match(STRING);
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==QUOTED_STRING) {
					{
					{
					State = 141; Match(QUOTED_STRING);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode SQL() { return GetToken(LookMLParser.SQL, 0); }
		public ITerminalNode LABEL() { return GetToken(LookMLParser.LABEL, 0); }
		public ITerminalNode TYPE() { return GetToken(LookMLParser.TYPE, 0); }
		public ITerminalNode LINK() { return GetToken(LookMLParser.LINK, 0); }
		public ITerminalNode URL() { return GetToken(LookMLParser.URL, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(LookMLParser.DESCRIPTION, 0); }
		public ITerminalNode VIEW_LABEL() { return GetToken(LookMLParser.VIEW_LABEL, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 18, RULE_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SQL) | (1L << LABEL) | (1L << VIEW_LABEL) | (1L << TYPE) | (1L << LINK) | (1L << URL) | (1L << DESCRIPTION))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode TABLE_REF() { return GetToken(LookMLParser.TABLE_REF, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(LookMLParser.QUOTED_STRING, 0); }
		public ITerminalNode STRING() { return GetToken(LookMLParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << QUOTED_STRING) | (1L << TABLE_REF))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode[] STRING() { return GetTokens(LookMLParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(LookMLParser.STRING, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 153; Match(STRING);
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(LookMLParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILookMLListener typedListener = listener as ILookMLListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 24, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\xA3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1F', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\"', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ',', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '/', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x32', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '?', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x42', '\v', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'T', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '[', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '^', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'l', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'q', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'u', '\n', '\b', '\f', '\b', 
		'\xE', '\b', 'x', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x84', '\n', '\b', '\x5', '\b', '\x86', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', '\n', '\x8B', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x8E', '\v', '\n', '\x3', '\n', '\a', 
		'\n', '\x91', '\n', '\n', '\f', '\n', '\xE', '\n', '\x94', '\v', '\n', 
		'\x5', '\n', '\x96', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x6', '\r', '\x9D', '\n', '\r', '\r', '\r', 
		'\xE', '\r', '\x9E', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x2', 
		'\x2', '\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x2', '\x5', '\x4', '\x2', '\r', '\r', 
		'\x10', '\x10', '\x3', '\x2', '\x6', '\f', '\x3', '\x2', '\x11', '\x13', 
		'\x2', '\xAA', '\x2', ' ', '\x3', '\x2', '\x2', '\x2', '\x4', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x35', '\x3', '\x2', '\x2', '\x2', '\b', 
		':', '\x3', '\x2', '\x2', '\x2', '\n', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'k', '\x3', '\x2', '\x2', '\x2', '\xE', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x87', '\x3', '\x2', '\x2', '\x2', '\x12', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x97', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x18', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x5', 
		'\x4', '\x3', '\x2', '\x1D', '\x1F', '\x5', '\x1A', '\xE', '\x2', '\x1E', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '#', '\x3', '\x2', 
		'\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x2', 
		'\x2', '\x3', '$', '\x3', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', 
		'\x3', '\x2', '\x2', '&', '\'', '\a', '\x17', '\x2', '\x2', '\'', '(', 
		'\a', '\x11', '\x2', '\x2', '(', '+', '\a', '\x18', '\x2', '\x2', ')', 
		',', '\x5', '\x6', '\x4', '\x2', '*', ',', '\x5', '\b', '\x5', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '-', '/', '\x5', '\f', '\a', '\x2', '.', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\a', '\x19', '\x2', '\x2', '\x34', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\a', '\x4', '\x2', '\x2', '\x36', '\x37', 
		'\a', '\x17', '\x2', '\x2', '\x37', '\x38', '\x5', '\x18', '\r', '\x2', 
		'\x38', '\x39', '\a', '\x16', '\x2', '\x2', '\x39', '\a', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\a', '\xE', '\x2', '\x2', ';', '<', '\a', '\x17', 
		'\x2', '\x2', '<', '@', '\a', '\x18', '\x2', '\x2', '=', '?', '\x5', '\n', 
		'\x6', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x19', 
		'\x2', '\x2', '\x44', '\t', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\a', '\x6', '\x2', '\x2', '\x46', 'G', '\a', '\x17', '\x2', '\x2', 'G', 
		'H', '\x5', '\x18', '\r', '\x2', 'H', 'I', '\a', '\x16', '\x2', '\x2', 
		'I', 'T', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x5', '\x10', '\t', '\x2', 
		'K', 'L', '\a', '\x17', '\x2', '\x2', 'L', 'M', '\x5', '\x12', '\n', '\x2', 
		'M', 'T', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\xF', '\x2', '\x2', 
		'O', 'P', '\a', '\x17', '\x2', '\x2', 'P', 'Q', '\x5', '\x18', '\r', '\x2', 
		'Q', 'R', '\a', '\x16', '\x2', '\x2', 'R', 'T', '\x3', '\x2', '\x2', '\x2', 
		'S', '\x45', '\x3', '\x2', '\x2', '\x2', 'S', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'N', '\x3', '\x2', '\x2', '\x2', 'T', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\a', '\x5', '\x2', '\x2', 'V', 'W', '\a', '\x17', 
		'\x2', '\x2', 'W', 'X', '\a', '\x11', '\x2', '\x2', 'X', '\\', '\a', '\x18', 
		'\x2', '\x2', 'Y', '[', '\x5', '\xE', '\b', '\x2', 'Z', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', 
		'\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', 
		'l', '\a', '\x19', '\x2', '\x2', '`', '\x61', '\a', '\x18', '\x2', '\x2', 
		'\x61', 'l', '\a', '\x19', '\x2', '\x2', '\x62', '\x63', '\a', '\x6', 
		'\x2', '\x2', '\x63', '\x64', '\a', '\x17', '\x2', '\x2', '\x64', '\x65', 
		'\a', '\x13', '\x2', '\x2', '\x65', 'l', '\a', '\x16', '\x2', '\x2', '\x66', 
		'g', '\a', '\x6', '\x2', '\x2', 'g', 'h', '\a', '\x17', '\x2', '\x2', 
		'h', 'i', '\x5', '\x18', '\r', '\x2', 'i', 'j', '\a', '\x16', '\x2', '\x2', 
		'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', 'U', '\x3', '\x2', '\x2', '\x2', 
		'k', '`', '\x3', '\x2', '\x2', '\x2', 'k', '\x62', '\x3', '\x2', '\x2', 
		'\x2', 'k', '\x66', '\x3', '\x2', '\x2', '\x2', 'l', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x5', '\x14', '\v', '\x2', 'n', 'p', '\a', '\x17', 
		'\x2', '\x2', 'o', 'q', '\a', '\x11', '\x2', '\x2', 'p', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'v', '\a', '\x18', '\x2', '\x2', 's', 'u', '\x5', '\xE', 
		'\b', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\a', '\x19', '\x2', '\x2', 'z', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x5', '\x10', '\t', '\x2', '|', '}', '\a', 
		'\x17', '\x2', '\x2', '}', '~', '\x5', '\x12', '\n', '\x2', '~', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x5', '\x14', '\v', '\x2', 
		'\x80', '\x81', '\a', '\x17', '\x2', '\x2', '\x81', '\x83', '\x5', '\x16', 
		'\f', '\x2', '\x82', '\x84', '\a', '\x16', '\x2', '\x2', '\x83', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '{', '\x3', '\x2', '\x2', '\x2', '\x85', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\t', '\x2', '\x2', '\x2', '\x88', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8B', '\a', '\x11', '\x2', '\x2', '\x8A', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x96', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\a', '\x12', '\x2', '\x2', 
		'\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x92', '\x3', '\x2', '\x2', '\x2', '\x96', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\t', '\x3', '\x2', '\x2', 
		'\x98', '\x15', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\t', '\x4', 
		'\x2', '\x2', '\x9A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9D', 
		'\a', '\x11', '\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x15', '\x2', '\x2', 
		'\xA1', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x12', '\x1E', ' ', '+', 
		'\x30', '@', 'S', '\\', 'k', 'p', 'v', '\x83', '\x85', '\x8C', '\x92', 
		'\x95', '\x9E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GraphqlToTsql.CodeGen.LookML
