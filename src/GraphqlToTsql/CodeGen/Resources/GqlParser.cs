//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Resources\Gql.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphqlToTsql.CodeGen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		STRING=18, BOOLEAN=19, NAME=20, NUMBER=21, WS=22;
	public const int
		RULE_document = 0, RULE_definition = 1, RULE_operationDefinition = 2, 
		RULE_selectionSet = 3, RULE_operationType = 4, RULE_selection = 5, RULE_field = 6, 
		RULE_fieldName = 7, RULE_alias = 8, RULE_arguments = 9, RULE_argument = 10, 
		RULE_fragmentSpread = 11, RULE_inlineFragment = 12, RULE_fragmentDefinition = 13, 
		RULE_fragmentName = 14, RULE_directives = 15, RULE_directive = 16, RULE_typeCondition = 17, 
		RULE_variableDefinitions = 18, RULE_variableDefinition = 19, RULE_variable = 20, 
		RULE_defaultValue = 21, RULE_valueOrVariable = 22, RULE_value = 23, RULE_type = 24, 
		RULE_typeName = 25, RULE_listType = 26, RULE_nonNullType = 27, RULE_array = 28;
	public static readonly string[] ruleNames = {
		"document", "definition", "operationDefinition", "selectionSet", "operationType", 
		"selection", "field", "fieldName", "alias", "arguments", "argument", "fragmentSpread", 
		"inlineFragment", "fragmentDefinition", "fragmentName", "directives", 
		"directive", "typeCondition", "variableDefinitions", "variableDefinition", 
		"variable", "defaultValue", "valueOrVariable", "value", "type", "typeName", 
		"listType", "nonNullType", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "'query'", "'mutation'", "':'", "'('", "')'", 
		"'...'", "'on'", "'fragment'", "'@'", "'$'", "'='", "'['", "']'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "STRING", "BOOLEAN", "NAME", "NUMBER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 58; definition();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__10))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public OperationDefinitionContext operationDefinition() {
			return GetRuleContext<OperationDefinitionContext>(0);
		}
		public FragmentDefinitionContext fragmentDefinition() {
			return GetRuleContext<FragmentDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; operationDefinition();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; fragmentDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDefinitionContext : ParserRuleContext {
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public VariableDefinitionsContext variableDefinitions() {
			return GetRuleContext<VariableDefinitionsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public OperationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterOperationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitOperationDefinition(this);
		}
	}

	[RuleVersion(0)]
	public OperationDefinitionContext operationDefinition() {
		OperationDefinitionContext _localctx = new OperationDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_operationDefinition);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; selectionSet();
				}
				break;
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; operationType();
				State = 69; Match(NAME);
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 70; variableDefinitions();
					}
				}

				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 73; directives();
					}
				}

				State = 76; selectionSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionSetContext : ParserRuleContext {
		public SelectionContext[] selection() {
			return GetRuleContexts<SelectionContext>();
		}
		public SelectionContext selection(int i) {
			return GetRuleContext<SelectionContext>(i);
		}
		public SelectionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterSelectionSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitSelectionSet(this);
		}
	}

	[RuleVersion(0)]
	public SelectionSetContext selectionSet() {
		SelectionSetContext _localctx = new SelectionSetContext(Context, State);
		EnterRule(_localctx, 6, RULE_selectionSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(T__0);
			State = 81; selection();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__8) | (1L << NAME))) != 0)) {
				{
				{
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 82; Match(T__1);
					}
				}

				State = 85; selection();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationTypeContext : ParserRuleContext {
		public OperationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterOperationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitOperationType(this);
		}
	}

	[RuleVersion(0)]
	public OperationTypeContext operationType() {
		OperationTypeContext _localctx = new OperationTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public FragmentSpreadContext fragmentSpread() {
			return GetRuleContext<FragmentSpreadContext>(0);
		}
		public InlineFragmentContext inlineFragment() {
			return GetRuleContext<InlineFragmentContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_selection);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; fragmentSpread();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; inlineFragment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; fieldName();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 101; arguments();
				}
			}

			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 104; directives();
				}
			}

			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 107; selectionSet();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldName);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; alias();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(GqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(GqlParser.NAME, i);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 16, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(NAME);
			State = 115; Match(T__5);
			State = 116; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(T__6);
			State = 119; argument();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 120; Match(T__1);
				State = 121; argument();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public ValueOrVariableContext valueOrVariable() {
			return GetRuleContext<ValueOrVariableContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(NAME);
			State = 130; Match(T__5);
			State = 131; valueOrVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentSpreadContext : ParserRuleContext {
		public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentSpreadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentSpread; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFragmentSpread(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFragmentSpread(this);
		}
	}

	[RuleVersion(0)]
	public FragmentSpreadContext fragmentSpread() {
		FragmentSpreadContext _localctx = new FragmentSpreadContext(Context, State);
		EnterRule(_localctx, 22, RULE_fragmentSpread);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(T__8);
			State = 134; fragmentName();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 135; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineFragmentContext : ParserRuleContext {
		public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InlineFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterInlineFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitInlineFragment(this);
		}
	}

	[RuleVersion(0)]
	public InlineFragmentContext inlineFragment() {
		InlineFragmentContext _localctx = new InlineFragmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_inlineFragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(T__8);
			State = 139; Match(T__9);
			State = 140; typeCondition();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 141; directives();
				}
			}

			State = 144; selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentDefinitionContext : ParserRuleContext {
		public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFragmentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFragmentDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FragmentDefinitionContext fragmentDefinition() {
		FragmentDefinitionContext _localctx = new FragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_fragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__10);
			State = 147; fragmentName();
			State = 148; Match(T__9);
			State = 149; typeCondition();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 150; directives();
				}
			}

			State = 153; selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public FragmentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterFragmentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitFragmentName(this);
		}
	}

	[RuleVersion(0)]
	public FragmentNameContext fragmentName() {
		FragmentNameContext _localctx = new FragmentNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_fragmentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivesContext : ParserRuleContext {
		public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		public DirectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirectives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirectives(this);
		}
	}

	[RuleVersion(0)]
	public DirectivesContext directives() {
		DirectivesContext _localctx = new DirectivesContext(Context, State);
		EnterRule(_localctx, 30, RULE_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 157; directive();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__11 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public ValueOrVariableContext valueOrVariable() {
			return GetRuleContext<ValueOrVariableContext>(0);
		}
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 32, RULE_directive);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; Match(T__11);
				State = 163; Match(NAME);
				State = 164; Match(T__5);
				State = 165; valueOrVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; Match(T__11);
				State = 167; Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 168; Match(T__11);
				State = 169; Match(NAME);
				State = 170; Match(T__6);
				State = 171; argument();
				State = 172; Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConditionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeCondition(this);
		}
	}

	[RuleVersion(0)]
	public TypeConditionContext typeCondition() {
		TypeConditionContext _localctx = new TypeConditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionsContext : ParserRuleContext {
		public VariableDefinitionContext[] variableDefinition() {
			return GetRuleContexts<VariableDefinitionContext>();
		}
		public VariableDefinitionContext variableDefinition(int i) {
			return GetRuleContext<VariableDefinitionContext>(i);
		}
		public VariableDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterVariableDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitVariableDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionsContext variableDefinitions() {
		VariableDefinitionsContext _localctx = new VariableDefinitionsContext(Context, State);
		EnterRule(_localctx, 36, RULE_variableDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(T__6);
			State = 179; variableDefinition();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 180; Match(T__1);
				State = 181; variableDefinition();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterVariableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitVariableDefinition(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_variableDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; variable();
			State = 190; Match(T__5);
			State = 191; type();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 192; defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 40, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(T__12);
			State = 196; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(T__13);
			State = 199; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueOrVariableContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueOrVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueOrVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterValueOrVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitValueOrVariable(this);
		}
	}

	[RuleVersion(0)]
	public ValueOrVariableContext valueOrVariable() {
		ValueOrVariableContext _localctx = new ValueOrVariableContext(Context, State);
		EnterRule(_localctx, 44, RULE_valueOrVariable);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case STRING:
			case BOOLEAN:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; value();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringValueContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(GqlParser.STRING, 0); }
		public StringValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
	}
	public partial class BooleanValueContext : ValueContext {
		public ITerminalNode BOOLEAN() { return GetToken(GqlParser.BOOLEAN, 0); }
		public BooleanValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
	}
	public partial class NumberValueContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(GqlParser.NUMBER, 0); }
		public NumberValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterNumberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitNumberValue(this);
		}
	}
	public partial class ArrayValueContext : ValueContext {
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_value);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new StringValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new NumberValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; Match(NUMBER);
				}
				break;
			case BOOLEAN:
				_localctx = new BooleanValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 207; Match(BOOLEAN);
				}
				break;
			case T__14:
				_localctx = new ArrayValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 208; array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NonNullTypeContext nonNullType() {
			return GetRuleContext<NonNullTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_type);
		int _la;
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; typeName();
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 212; nonNullType();
					}
				}

				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; listType();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 216; nonNullType();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GqlParser.NAME, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(T__14);
			State = 224; type();
			State = 225; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullTypeContext : ParserRuleContext {
		public NonNullTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterNonNullType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitNonNullType(this);
		}
	}

	[RuleVersion(0)]
	public NonNullTypeContext nonNullType() {
		NonNullTypeContext _localctx = new NonNullTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_nonNullType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGqlListener typedListener = listener as IGqlListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 56, RULE_array);
		int _la;
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(T__14);
				State = 230; value();
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 231; Match(T__1);
					State = 232; value();
					}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 238; Match(T__15);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(T__14);
				State = 241; Match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\xF7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\x6', '\x2', '>', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '?', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', 'J', '\n', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'M', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'Q', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', 
		'\n', '\x5', '\x3', '\x5', '\a', '\x5', 'Y', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\\', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x65', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'i', '\n', '\b', '\x3', 
		'\b', '\x5', '\b', 'l', '\n', '\b', '\x3', '\b', '\x5', '\b', 'o', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 's', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '}', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x80', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x8B', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x91', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x9A', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x6', '\x11', '\xA1', '\n', '\x11', 
		'\r', '\x11', '\xE', '\x11', '\xA2', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\xB1', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xB9', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\xBC', '\v', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xC4', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\xCE', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xD4', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xD8', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\xDC', '\n', '\x1A', '\x5', '\x1A', '\xDE', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\xEC', '\n', 
		'\x1E', '\f', '\x1E', '\xE', '\x1E', '\xEF', '\v', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\xF5', '\n', 
		'\x1E', '\x3', '\x1E', '\x2', '\x2', '\x1F', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '\x2', '\x3', '\x3', '\x2', '\x6', '\a', '\x2', '\xF8', 
		'\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x4', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'P', '\x3', '\x2', '\x2', '\x2', '\b', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\n', '_', '\x3', '\x2', '\x2', '\x2', '\f', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x66', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'r', '\x3', '\x2', '\x2', '\x2', '\x12', 't', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'x', '\x3', '\x2', '\x2', '\x2', '\x16', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x87', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x9D', '\x3', '\x2', '\x2', '\x2', ' ', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xB0', '\x3', '\x2', '\x2', '\x2', '$', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xB4', '\x3', '\x2', '\x2', '\x2', '(', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xC5', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '.', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x32', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\x38', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', ':', '\xF4', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x5', '\x4', 
		'\x3', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', 
		'\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x3', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', 
		'\x5', '\x6', '\x4', '\x2', '\x42', '\x44', '\x5', '\x1C', '\xF', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x5', '\x3', '\x2', '\x2', '\x2', '\x45', 'Q', 
		'\x5', '\b', '\x5', '\x2', '\x46', 'G', '\x5', '\n', '\x6', '\x2', 'G', 
		'I', '\a', '\x16', '\x2', '\x2', 'H', 'J', '\x5', '&', '\x14', '\x2', 
		'I', 'H', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\x5', ' ', '\x11', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\b', '\x5', '\x2', 
		'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'P', '\x46', '\x3', '\x2', '\x2', '\x2', 'Q', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', '\x3', '\x2', '\x2', 'S', 'Z', '\x5', '\f', 
		'\a', '\x2', 'T', 'V', '\a', '\x4', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'Y', '\x5', '\f', '\a', '\x2', 'X', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\a', '\x5', '\x2', '\x2', '^', '\t', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\t', '\x2', '\x2', '\x2', '`', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x65', '\x5', '\xE', '\b', '\x2', '\x62', '\x65', '\x5', '\x18', 
		'\r', '\x2', '\x63', '\x65', '\x5', '\x1A', '\xE', '\x2', '\x64', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'h', '\x5', '\x10', '\t', '\x2', 'g', 'i', '\x5', 
		'\x14', '\v', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x5', 
		' ', '\x11', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x5', 
		'\b', '\x5', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'o', '\xF', '\x3', '\x2', '\x2', '\x2', 'p', 's', 
		'\x5', '\x12', '\n', '\x2', 'q', 's', '\a', '\x16', '\x2', '\x2', 'r', 
		'p', '\x3', '\x2', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', '\x11', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\x16', '\x2', 
		'\x2', 'u', 'v', '\a', '\b', '\x2', '\x2', 'v', 'w', '\a', '\x16', '\x2', 
		'\x2', 'w', '\x13', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\t', 
		'\x2', '\x2', 'y', '~', '\x5', '\x16', '\f', '\x2', 'z', '{', '\a', '\x4', 
		'\x2', '\x2', '{', '}', '\x5', '\x16', '\f', '\x2', '|', 'z', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x80', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '\n', '\x2', '\x2', '\x82', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x16', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\b', '\x2', '\x2', '\x85', '\x86', '\x5', '.', '\x18', 
		'\x2', '\x86', '\x17', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', 
		'\v', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x1E', '\x10', '\x2', '\x89', 
		'\x8B', '\x5', ' ', '\x11', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\v', '\x2', '\x2', '\x8D', 
		'\x8E', '\a', '\f', '\x2', '\x2', '\x8E', '\x90', '\x5', '$', '\x13', 
		'\x2', '\x8F', '\x91', '\x5', ' ', '\x11', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x5', '\b', '\x5', 
		'\x2', '\x93', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\r', '\x2', '\x2', '\x95', '\x96', '\x5', '\x1E', '\x10', '\x2', '\x96', 
		'\x97', '\a', '\f', '\x2', '\x2', '\x97', '\x99', '\x5', '$', '\x13', 
		'\x2', '\x98', '\x9A', '\x5', ' ', '\x11', '\x2', '\x99', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\b', '\x5', 
		'\x2', '\x9C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'\x16', '\x2', '\x2', '\x9E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA1', '\x5', '\"', '\x12', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '\xE', '\x2', '\x2', 
		'\xA5', '\xA6', '\a', '\x16', '\x2', '\x2', '\xA6', '\xA7', '\a', '\b', 
		'\x2', '\x2', '\xA7', '\xB1', '\x5', '.', '\x18', '\x2', '\xA8', '\xA9', 
		'\a', '\xE', '\x2', '\x2', '\xA9', '\xB1', '\a', '\x16', '\x2', '\x2', 
		'\xAA', '\xAB', '\a', '\xE', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x16', 
		'\x2', '\x2', '\xAC', '\xAD', '\a', '\t', '\x2', '\x2', '\xAD', '\xAE', 
		'\x5', '\x16', '\f', '\x2', '\xAE', '\xAF', '\a', '\n', '\x2', '\x2', 
		'\xAF', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '#', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\x5', '\x34', '\x1B', '\x2', '\xB3', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '\t', '\x2', '\x2', '\xB5', '\xBA', '\x5', 
		'(', '\x15', '\x2', '\xB6', '\xB7', '\a', '\x4', '\x2', '\x2', '\xB7', 
		'\xB9', '\x5', '(', '\x15', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\a', '\n', '\x2', '\x2', '\xBE', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\x5', '*', '\x16', '\x2', '\xC0', 
		'\xC1', '\a', '\b', '\x2', '\x2', '\xC1', '\xC3', '\x5', '\x32', '\x1A', 
		'\x2', '\xC2', '\xC4', '\x5', ',', '\x17', '\x2', '\xC3', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		')', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\xF', '\x2', '\x2', 
		'\xC6', '\xC7', '\a', '\x16', '\x2', '\x2', '\xC7', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\a', '\x10', '\x2', '\x2', '\xC9', '\xCA', 
		'\x5', '\x30', '\x19', '\x2', '\xCA', '-', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCE', '\x5', '\x30', '\x19', '\x2', '\xCC', '\xCE', '\x5', '*', 
		'\x16', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '/', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD4', '\a', '\x14', '\x2', '\x2', '\xD0', '\xD4', '\a', '\x17', '\x2', 
		'\x2', '\xD1', '\xD4', '\a', '\x15', '\x2', '\x2', '\xD2', '\xD4', '\x5', 
		':', '\x1E', '\x2', '\xD3', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD7', '\x5', '\x34', '\x1B', '\x2', '\xD6', 
		'\xD8', '\x5', '\x38', '\x1D', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDB', '\x5', '\x36', '\x1C', '\x2', '\xDA', 
		'\xDC', '\x5', '\x38', '\x1D', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\a', '\x16', '\x2', '\x2', '\xE0', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x11', '\x2', '\x2', '\xE2', 
		'\xE3', '\x5', '\x32', '\x1A', '\x2', '\xE3', '\xE4', '\a', '\x12', '\x2', 
		'\x2', '\xE4', '\x37', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', 
		'\x13', '\x2', '\x2', '\xE6', '\x39', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\a', '\x11', '\x2', '\x2', '\xE8', '\xED', '\x5', '\x30', '\x19', 
		'\x2', '\xE9', '\xEA', '\a', '\x4', '\x2', '\x2', '\xEA', '\xEC', '\x5', 
		'\x30', '\x19', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '\x12', '\x2', '\x2', '\xF1', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\a', '\x11', '\x2', '\x2', '\xF3', '\xF5', '\a', 
		'\x12', '\x2', '\x2', '\xF4', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '?', '\x43', 'I', 'L', 'P', 'U', 'Z', '\x64', 'h', 'k', 
		'n', 'r', '~', '\x8A', '\x90', '\x99', '\xA2', '\xB0', '\xBA', '\xC3', 
		'\xCD', '\xD3', '\xD7', '\xDB', '\xDD', '\xED', '\xF4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GraphqlToTsql.CodeGen
